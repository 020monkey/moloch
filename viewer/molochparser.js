/* Jison generated parser */
var molochparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"LTA":6,"lt":7,"lte":8,"GTA":9,"gt":10,"gte":11,"GTLT":12,"IPNUM":13,"IPMATCH":14,"NUMBER":15,"RANGEFIELD":16,"databytes":17,"bytes":18,"packets":19,"protocol":20,"port.src":21,"port.dst":22,"uri.cnt":23,"cert.cnt":24,"ip.xff.cnt":25,"ip.dns.cnt":26,"ua.cnt":27,"user.cnt":28,"host.cnt":29,"header.src.cnt":30,"header.dst.cnt":31,"tags.cnt":32,"cert.alt.cnt":33,"ssh.key.cnt":34,"ssh.ver.cnt":35,"LOTERMFIELD":36,"node":37,"host":38,"user":39,"cert.subject.cn":40,"cert.issuer.cn":41,"cert.serial":42,"cert.alt":43,"ssh.ver":44,"TERMFIELD":45,"id":46,"ssh.key":47,"UPTERMFIELD":48,"country.src":49,"country.dst":50,"country.dns":51,"TEXTFIELD":52,"asn.src":53,"asn.dst":54,"asn.dns":55,"cert.subject.on":56,"cert.issuer.on":57,"IPFIELD":58,"ip":59,"ip.src":60,"ip.dst":61,"ip.xff":62,"ip.dns":63,"STR":64,"ID":65,"asn":66,"dns":67,"dst":68,"src":69,"xff":70,"cert":71,"alt":72,"cnt":73,"issuer":74,"cn":75,"on":76,"serial":77,"subject":78,"country":79,"header":80,"icmp":81,"port":82,"QUOTEDSTR":83,"ssh":84,"key":85,"ver":86,"tags":87,"tcp":88,"ua":89,"udp":90,"uri":91,"&&":92,"==":93,"!=":94,"||":95,"!":96,"-":97,"(":98,")":99,"oldheader":100,"header.src":101,"header.dst":102,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"lt",8:"lte",10:"gt",11:"gte",14:"IPMATCH",15:"NUMBER",17:"databytes",18:"bytes",19:"packets",20:"protocol",21:"port.src",22:"port.dst",23:"uri.cnt",24:"cert.cnt",25:"ip.xff.cnt",26:"ip.dns.cnt",27:"ua.cnt",28:"user.cnt",29:"host.cnt",30:"header.src.cnt",31:"header.dst.cnt",32:"tags.cnt",33:"cert.alt.cnt",34:"ssh.key.cnt",35:"ssh.ver.cnt",37:"node",38:"host",39:"user",40:"cert.subject.cn",41:"cert.issuer.cn",42:"cert.serial",43:"cert.alt",44:"ssh.ver",46:"id",47:"ssh.key",49:"country.src",50:"country.dst",51:"country.dns",53:"asn.src",54:"asn.dst",55:"asn.dns",56:"cert.subject.on",57:"cert.issuer.on",59:"ip",60:"ip.src",61:"ip.dst",62:"ip.xff",63:"ip.dns",65:"ID",66:"asn",67:"dns",68:"dst",69:"src",70:"xff",71:"cert",72:"alt",73:"cnt",74:"issuer",75:"cn",76:"on",77:"serial",78:"subject",79:"country",80:"header",81:"icmp",82:"port",83:"QUOTEDSTR",84:"ssh",85:"key",86:"ver",87:"tags",88:"tcp",89:"ua",90:"udp",91:"uri",92:"&&",93:"==",94:"!=",95:"||",96:"!",97:"-",98:"(",99:")",100:"oldheader",101:"header.src",102:"header.dst"},
productions_: [0,[3,2],[6,1],[6,1],[9,1],[9,1],[12,1],[12,1],[13,1],[13,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[45,1],[45,1],[48,1],[48,1],[48,1],[52,1],[52,1],[52,1],[52,1],[52,1],[58,1],[58,1],[58,1],[58,1],[58,1],[64,1],[64,1],[64,2],[64,2],[64,2],[64,2],[64,1],[64,2],[64,3],[64,2],[64,3],[64,3],[64,2],[64,3],[64,3],[64,1],[64,2],[64,2],[64,2],[64,2],[64,1],[64,2],[64,3],[64,2],[64,3],[64,1],[64,2],[64,1],[64,1],[64,2],[64,3],[64,2],[64,2],[64,2],[64,3],[64,1],[64,1],[64,1],[64,2],[64,2],[64,1],[64,1],[64,2],[64,3],[64,2],[64,3],[64,1],[64,2],[64,1],[64,1],[64,2],[64,1],[64,1],[64,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2:this.$ = 'lt'
break;
case 3:this.$ = 'lte'
break;
case 4:this.$ = 'gt'
break;
case 5:this.$ = 'gte'
break;
case 10:this.$ = 'db'
break;
case 11:this.$ = 'by'
break;
case 12:this.$ = 'pa'
break;
case 13:this.$ = 'pr'
break;
case 14:this.$ = 'p1'
break;
case 15:this.$ = 'p2'
break;
case 16:this.$ = 'uscnt'
break;
case 17:this.$ = 'tlscnt'
break;
case 18:this.$ = 'xffcnt'
break;
case 19:this.$ = 'dnsipcnt'
break;
case 20:this.$ = 'uacnt'
break;
case 21:this.$ = 'usercnt'
break;
case 22:this.$ = 'hocnt'
break;
case 23:this.$ = 'hh1cnt'
break;
case 24:this.$ = 'hh2cnt'
break;
case 25:this.$ = 'tacnt'
break;
case 26:this.$ = 'tls.altcnt'
break;
case 27:this.$ = 'sshkeycnt'
break;
case 28:this.$ = 'sshvercnt'
break;
case 29:this.$ = 'no'
break;
case 30:this.$ = 'ho'
break;
case 31:this.$ = 'user'
break;
case 32:this.$ = 'tls.sCn'
break;
case 33:this.$ = 'tls.iCn'
break;
case 34:this.$ = 'tls.sn'
break;
case 35:this.$ = 'tls.alt'
break;
case 36:this.$ = 'sshver'
break;
case 37:this.$ = '_id'
break;
case 38:this.$ = 'sshkey'
break;
case 39:this.$ = 'g1'
break;
case 40:this.$ = 'g2'
break;
case 41:this.$ = 'gdnsip'
break;
case 42:this.$ = 'as1'
break;
case 43:this.$ = 'as2'
break;
case 44:this.$ = 'asdnsip'
break;
case 45:this.$ = 'tls.sOn'
break;
case 46:this.$ = 'tls.iOn'
break;
case 47:this.$ = 0
break;
case 48:this.$ = 1
break;
case 49:this.$ = 2
break;
case 50:this.$ = 3
break;
case 51:this.$ = 4
break;
case 106:this.$ = {and: [$$[$0-2], $$[$0]]};
break;
case 107:this.$ = {query: {text: {us: {query: $$[$0], type: "phrase", operator: "and"}}}};
break;
case 108:this.$ = {not: {query: {text: {us: {query: $$[$0], type: "phrase", operator: "and"}}}}};
break;
case 109:this.$ = {query: {text: {ua: {query: $$[$0], type: "phrase", operator: "and"}}}};
break;
case 110:this.$ = {not: {query: {text: {ua: {query: $$[$0], type: "phrase", operator: "and"}}}}};
break;
case 111:this.$ = {or: [$$[$0-2], $$[$0]]};
break;
case 112:this.$ = {not: $$[$0]};
break;
case 113:this.$ = -$$[$0];
break;
case 114:this.$ = $$[$0-1];
break;
case 115:this.$ = {term: {pr: 1}};
break;
case 116:this.$ = {term: {pr: 6}};
break;
case 117:this.$ = {term: {pr: 17}};
break;
case 118:this.$ = {not: {term: {pr: 1}}};
break;
case 119:this.$ = {not: {term: {pr: 6}}};
break;
case 120:this.$ = {not: {term: {pr: 17}}};
break;
case 121:this.$ = {range: {}};
         this.$.range[$$[$0-2]] = {};
         this.$.range[$$[$0-2]][$$[$0-1]] = $$[$0];
break;
case 122:this.$ = {term: {}};
         this.$.term[$$[$0-2]] = $$[$0];
break;
case 123:this.$ = {not: {term: {}}};
         this.$.not.term[$$[$0-2]] = $$[$0];
break;
case 124:this.$ = {or: [{range: {p1: {}}}, {range: {p2: {}}}]};
         this.$.or[0].range.p1[$$[$0-1]] = $$[$0];
         this.$.or[1].range.p2[$$[$0-1]] = $$[$0];
break;
case 125: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {query: {wildcard: {}}}};
            this.$.not.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {not: {term: {}}};
            this.$.not.term[$$[$0-2]] = str;
          }
        
break;
case 126: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {query: {wildcard: {}}};
            this.$.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {term: {}};
            this.$.term[$$[$0-2]] = str;
          }
        
break;
case 127: var str = stripQuotes($$[$0]);
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {query: {wildcard: {}}}};
            this.$.not.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {not: {term: {}}};
            this.$.not.term[$$[$0-2]] = str;
          }
        
break;
case 128: var str = stripQuotes($$[$0]);
          if (str.indexOf("*") !== -1) {
            this.$ = {query: {wildcard: {}}};
            this.$.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {term: {}};
            this.$.term[$$[$0-2]] = str;
          }
        
break;
case 129: var str = stripQuotes($$[$0]).toUpperCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {query: {wildcard: {}}}};
            this.$.not.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {not: {term: {}}};
            this.$.not.term[$$[$0-2]] = str;
          }
        
break;
case 130: var str = stripQuotes($$[$0]).toUpperCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {query: {wildcard: {}}};
            this.$.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {term: {}};
            this.$.term[$$[$0-2]] = str;
          }
        
break;
case 131: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {query: {wildcard: {}}}};
            this.$.not.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {not: {query: {text: {}}}};
            this.$.not.query.text[$$[$0-2]] = {query: str, type: "phrase", operator: "and"}
          }
        
break;
case 132: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {query: {wildcard: {}}};
            this.$.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {query: {text: {}}};
            this.$.query.text[$$[$0-2]] = {query: str, type: "phrase", operator: "and"}
          }
        
break;
case 133:this.$ = {or: [{term: {p1: $$[$0]}}, {term: {p2: $$[$0]}}]};
break;
case 134:this.$ = {not: {or: [{term: {p1: $$[$0]}}, {term: {p2: $$[$0]}}]}};
break;
case 135:this.$ = parseIpPort($$[$0],$$[$0-2]);
break;
case 136:this.$ = {not: parseIpPort($$[$0],$$[$0-2])};
break;
case 137: var tag = stripQuotes($$[$0]);
          this.$ = {term: {ta: tag}};
        
break;
case 138: var tag = stripQuotes($$[$0]);
          this.$ = {not: {term: {ta: tag}}};
        
break;
case 139: var tag = stripQuotes($$[$0]);
          this.$ = {term: {hh: tag}};
        
break;
case 140: var tag = stripQuotes($$[$0]);
          this.$ = {or: [{term: {hh1: tag}}, {term:{hh2: tag}}]};
        
break;
case 141: var tag = stripQuotes($$[$0]);
          this.$ = {term: {hh1: tag}};
        
break;
case 142: var tag = stripQuotes($$[$0]);
          this.$ = {term: {hh2: tag}};
        
break;
case 143: var tag = stripQuotes($$[$0]);
          this.$ = {not: {term: {hh1: tag}}};
        
break;
case 144: var tag = stripQuotes($$[$0]);
          this.$ = {not: {or: [{term: {hh1: tag}}, {term:{hh2: tag}}]}};
        
break;
case 145: var tag = stripQuotes($$[$0]);
          this.$ = {not: {term: {hh1: tag}}};
        
break;
case 146: var tag = stripQuotes($$[$0]);
          this.$ = {not: {term: {hh2: tag}}};
        
break;
case 147: var str = stripQuotes($$[$0]).toUpperCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {or: [{query: {wildcard: {g1: str}}}, {query: {wildcard: {g2: str}}}, {query: {wildcard: {gxff: str}}}]};
          } else {
            this.$ = {or: [{term: {g1: str}}, {term: {g2: str}}, {term: {gxff: str}}]};
          }
        
break;
case 148: var str = stripQuotes($$[$0]).toUpperCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {or: [{query: {wildcard: {g1: str}}}, {query: {wildcard: {g2: str}}}, {query: {wildcard: {gxff: str}}}]}};
          } else {
            this.$ = {not: {or: [{term: {g1: str}}, {term: {g2: str}}, {term: {gxff: str}}]}};
          }
        
break;
case 149: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {or: [{query: {wildcard: {as1: str}}}, {query: {wildcard: {as2: str}}}, {query: {wildcard: {asxff: str}}}]};
          } else {
            this.$ = {or: [{query: {text: {as1:   {query: str, type: "phrase", operator: "and"}}}}, 
                       {query: {text: {as2:   {query: str, type: "phrase", operator: "and"}}}}, 
                       {query: {text: {asxff: {query: str, type: "phrase", operator: "and"}}}}
                      ]
                 };
          }
        
break;
case 150: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {or: [{query: {wildcard: {as1: str}}}, {query: {wildcard: {as2: str}}}, {query: {wildcard: {asxff: str}}}]}};
          } else {
            this.$ = {not: {or: [{query: {text: {as1:   {query: str, type: "phrase", operator: "and"}}}}, 
                             {query: {text: {as2:   {query: str, type: "phrase", operator: "and"}}}}, 
                             {query: {text: {asxff: {query: str, type: "phrase", operator: "and"}}}}
                            ]
                 }};
          }
        
break;
}
},
table: [{3:1,4:2,16:9,17:[1,23],18:[1,24],19:[1,25],20:[1,8],21:[1,26],22:[1,27],23:[1,28],24:[1,29],25:[1,30],26:[1,31],27:[1,32],28:[1,33],29:[1,34],30:[1,35],31:[1,36],32:[1,37],33:[1,38],34:[1,39],35:[1,40],36:11,37:[1,41],38:[1,42],39:[1,43],40:[1,44],41:[1,45],42:[1,46],43:[1,47],44:[1,48],45:12,46:[1,49],47:[1,50],48:13,49:[1,51],50:[1,52],51:[1,53],52:14,53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:15,59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63],66:[1,22],79:[1,21],80:[1,18],82:[1,10],87:[1,16],89:[1,4],91:[1,3],96:[1,5],97:[1,6],98:[1,7],100:[1,17],101:[1,19],102:[1,20]},{1:[3]},{5:[1,64],92:[1,65],95:[1,66]},{93:[1,67],94:[1,68]},{93:[1,69],94:[1,70]},{4:71,16:9,17:[1,23],18:[1,24],19:[1,25],20:[1,8],21:[1,26],22:[1,27],23:[1,28],24:[1,29],25:[1,30],26:[1,31],27:[1,32],28:[1,33],29:[1,34],30:[1,35],31:[1,36],32:[1,37],33:[1,38],34:[1,39],35:[1,40],36:11,37:[1,41],38:[1,42],39:[1,43],40:[1,44],41:[1,45],42:[1,46],43:[1,47],44:[1,48],45:12,46:[1,49],47:[1,50],48:13,49:[1,51],50:[1,52],51:[1,53],52:14,53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:15,59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63],66:[1,22],79:[1,21],80:[1,18],82:[1,10],87:[1,16],89:[1,4],91:[1,3],96:[1,5],97:[1,6],98:[1,7],100:[1,17],101:[1,19],102:[1,20]},{4:72,16:9,17:[1,23],18:[1,24],19:[1,25],20:[1,8],21:[1,26],22:[1,27],23:[1,28],24:[1,29],25:[1,30],26:[1,31],27:[1,32],28:[1,33],29:[1,34],30:[1,35],31:[1,36],32:[1,37],33:[1,38],34:[1,39],35:[1,40],36:11,37:[1,41],38:[1,42],39:[1,43],40:[1,44],41:[1,45],42:[1,46],43:[1,47],44:[1,48],45:12,46:[1,49],47:[1,50],48:13,49:[1,51],50:[1,52],51:[1,53],52:14,53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:15,59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63],66:[1,22],79:[1,21],80:[1,18],82:[1,10],87:[1,16],89:[1,4],91:[1,3],96:[1,5],97:[1,6],98:[1,7],100:[1,17],101:[1,19],102:[1,20]},{4:73,16:9,17:[1,23],18:[1,24],19:[1,25],20:[1,8],21:[1,26],22:[1,27],23:[1,28],24:[1,29],25:[1,30],26:[1,31],27:[1,32],28:[1,33],29:[1,34],30:[1,35],31:[1,36],32:[1,37],33:[1,38],34:[1,39],35:[1,40],36:11,37:[1,41],38:[1,42],39:[1,43],40:[1,44],41:[1,45],42:[1,46],43:[1,47],44:[1,48],45:12,46:[1,49],47:[1,50],48:13,49:[1,51],50:[1,52],51:[1,53],52:14,53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:15,59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63],66:[1,22],79:[1,21],80:[1,18],82:[1,10],87:[1,16],89:[1,4],91:[1,3],96:[1,5],97:[1,6],98:[1,7],100:[1,17],101:[1,19],102:[1,20]},{7:[2,13],8:[2,13],10:[2,13],11:[2,13],93:[1,74],94:[1,75]},{6:79,7:[1,81],8:[1,82],9:80,10:[1,83],11:[1,84],12:76,93:[1,77],94:[1,78]},{6:79,7:[1,81],8:[1,82],9:80,10:[1,83],11:[1,84],12:85,93:[1,86],94:[1,87]},{93:[1,89],94:[1,88]},{93:[1,91],94:[1,90]},{93:[1,93],94:[1,92]},{93:[1,95],94:[1,94]},{93:[1,96],94:[1,97]},{93:[1,98],94:[1,99]},{93:[1,100],94:[1,101]},{93:[1,102],94:[1,103]},{93:[1,104],94:[1,105]},{93:[1,106],94:[1,107]},{93:[1,108],94:[1,109]},{93:[1,110],94:[1,111]},{7:[2,10],8:[2,10],10:[2,10],11:[2,10],93:[2,10],94:[2,10]},{7:[2,11],8:[2,11],10:[2,11],11:[2,11],93:[2,11],94:[2,11]},{7:[2,12],8:[2,12],10:[2,12],11:[2,12],93:[2,12],94:[2,12]},{7:[2,14],8:[2,14],10:[2,14],11:[2,14],93:[2,14],94:[2,14]},{7:[2,15],8:[2,15],10:[2,15],11:[2,15],93:[2,15],94:[2,15]},{7:[2,16],8:[2,16],10:[2,16],11:[2,16],93:[2,16],94:[2,16]},{7:[2,17],8:[2,17],10:[2,17],11:[2,17],93:[2,17],94:[2,17]},{7:[2,18],8:[2,18],10:[2,18],11:[2,18],93:[2,18],94:[2,18]},{7:[2,19],8:[2,19],10:[2,19],11:[2,19],93:[2,19],94:[2,19]},{7:[2,20],8:[2,20],10:[2,20],11:[2,20],93:[2,20],94:[2,20]},{7:[2,21],8:[2,21],10:[2,21],11:[2,21],93:[2,21],94:[2,21]},{7:[2,22],8:[2,22],10:[2,22],11:[2,22],93:[2,22],94:[2,22]},{7:[2,23],8:[2,23],10:[2,23],11:[2,23],93:[2,23],94:[2,23]},{7:[2,24],8:[2,24],10:[2,24],11:[2,24],93:[2,24],94:[2,24]},{7:[2,25],8:[2,25],10:[2,25],11:[2,25],93:[2,25],94:[2,25]},{7:[2,26],8:[2,26],10:[2,26],11:[2,26],93:[2,26],94:[2,26]},{7:[2,27],8:[2,27],10:[2,27],11:[2,27],93:[2,27],94:[2,27]},{7:[2,28],8:[2,28],10:[2,28],11:[2,28],93:[2,28],94:[2,28]},{93:[2,29],94:[2,29]},{93:[2,30],94:[2,30]},{93:[2,31],94:[2,31]},{93:[2,32],94:[2,32]},{93:[2,33],94:[2,33]},{93:[2,34],94:[2,34]},{93:[2,35],94:[2,35]},{93:[2,36],94:[2,36]},{93:[2,37],94:[2,37]},{93:[2,38],94:[2,38]},{93:[2,39],94:[2,39]},{93:[2,40],94:[2,40]},{93:[2,41],94:[2,41]},{93:[2,42],94:[2,42]},{93:[2,43],94:[2,43]},{93:[2,44],94:[2,44]},{93:[2,45],94:[2,45]},{93:[2,46],94:[2,46]},{93:[2,47],94:[2,47]},{93:[2,48],94:[2,48]},{93:[2,49],94:[2,49]},{93:[2,50],94:[2,50]},{93:[2,51],94:[2,51]},{1:[2,1]},{4:112,16:9,17:[1,23],18:[1,24],19:[1,25],20:[1,8],21:[1,26],22:[1,27],23:[1,28],24:[1,29],25:[1,30],26:[1,31],27:[1,32],28:[1,33],29:[1,34],30:[1,35],31:[1,36],32:[1,37],33:[1,38],34:[1,39],35:[1,40],36:11,37:[1,41],38:[1,42],39:[1,43],40:[1,44],41:[1,45],42:[1,46],43:[1,47],44:[1,48],45:12,46:[1,49],47:[1,50],48:13,49:[1,51],50:[1,52],51:[1,53],52:14,53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:15,59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63],66:[1,22],79:[1,21],80:[1,18],82:[1,10],87:[1,16],89:[1,4],91:[1,3],96:[1,5],97:[1,6],98:[1,7],100:[1,17],101:[1,19],102:[1,20]},{4:113,16:9,17:[1,23],18:[1,24],19:[1,25],20:[1,8],21:[1,26],22:[1,27],23:[1,28],24:[1,29],25:[1,30],26:[1,31],27:[1,32],28:[1,33],29:[1,34],30:[1,35],31:[1,36],32:[1,37],33:[1,38],34:[1,39],35:[1,40],36:11,37:[1,41],38:[1,42],39:[1,43],40:[1,44],41:[1,45],42:[1,46],43:[1,47],44:[1,48],45:12,46:[1,49],47:[1,50],48:13,49:[1,51],50:[1,52],51:[1,53],52:14,53:[1,54],54:[1,55],55:[1,56],56:[1,57],57:[1,58],58:15,59:[1,59],60:[1,60],61:[1,61],62:[1,62],63:[1,63],66:[1,22],79:[1,21],80:[1,18],82:[1,10],87:[1,16],89:[1,4],91:[1,3],96:[1,5],97:[1,6],98:[1,7],100:[1,17],101:[1,19],102:[1,20]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:114,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:135,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:136,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:137,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{5:[2,112],92:[2,112],95:[2,112],99:[2,112]},{5:[2,113],92:[2,113],95:[2,113],99:[2,113]},{92:[1,65],95:[1,66],99:[1,138]},{81:[1,139],88:[1,140],90:[1,141]},{81:[1,142],88:[1,143],90:[1,144]},{15:[1,145]},{15:[1,146]},{15:[1,147]},{15:[2,6]},{15:[2,7]},{15:[2,2]},{15:[2,3]},{15:[2,4]},{15:[2,5]},{15:[1,148]},{15:[1,149]},{15:[1,150]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:151,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:152,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:153,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:154,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:155,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:156,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:157,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:158,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{13:159,14:[1,160],15:[1,161]},{13:162,14:[1,160],15:[1,161]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:163,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:164,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:165,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:166,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:167,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:168,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:169,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:170,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:171,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:172,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:173,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:174,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:175,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{18:[1,117],19:[1,125],20:[1,127],37:[1,124],38:[1,121],59:[1,123],64:176,65:[1,115],66:[1,116],71:[1,118],79:[1,119],80:[1,120],81:[1,122],82:[1,126],83:[1,128],84:[1,129],87:[1,130],88:[1,131],89:[1,132],90:[1,133],91:[1,134]},{5:[2,106],92:[2,106],95:[2,106],99:[2,106]},{5:[2,111],92:[1,65],95:[2,111],99:[2,111]},{5:[2,107],92:[2,107],95:[2,107],99:[2,107]},{5:[2,52],92:[2,52],95:[2,52],99:[2,52]},{5:[2,53],67:[1,177],68:[1,178],69:[1,179],70:[1,180],92:[2,53],95:[2,53],99:[2,53]},{5:[2,58],92:[2,58],95:[2,58],99:[2,58]},{72:[1,181],73:[1,182],74:[1,183],77:[1,184],78:[1,185]},{5:[2,67],67:[1,186],68:[1,187],69:[1,188],70:[1,189],92:[2,67],95:[2,67],99:[2,67]},{5:[2,72],68:[1,190],69:[1,191],92:[2,72],95:[2,72],99:[2,72]},{5:[2,77],73:[1,192],92:[2,77],95:[2,77],99:[2,77]},{5:[2,79],92:[2,79],95:[2,79],99:[2,79]},{5:[2,80],67:[1,193],68:[1,194],69:[1,195],70:[1,196],92:[2,80],95:[2,80],99:[2,80]},{5:[2,87],92:[2,87],95:[2,87],99:[2,87]},{5:[2,88],92:[2,88],95:[2,88],99:[2,88]},{5:[2,89],68:[1,197],69:[1,198],92:[2,89],95:[2,89],99:[2,89]},{5:[2,92],92:[2,92],95:[2,92],99:[2,92]},{5:[2,93],92:[2,93],95:[2,93],99:[2,93]},{85:[1,199],86:[1,200]},{5:[2,98],73:[1,201],92:[2,98],95:[2,98],99:[2,98]},{5:[2,100],92:[2,100],95:[2,100],99:[2,100]},{5:[2,101],73:[1,202],92:[2,101],95:[2,101],99:[2,101]},{5:[2,103],92:[2,103],95:[2,103],99:[2,103]},{5:[2,104],73:[1,203],92:[2,104],95:[2,104],99:[2,104]},{5:[2,108],92:[2,108],95:[2,108],99:[2,108]},{5:[2,109],92:[2,109],95:[2,109],99:[2,109]},{5:[2,110],92:[2,110],95:[2,110],99:[2,110]},{5:[2,114],92:[2,114],95:[2,114],99:[2,114]},{5:[2,115],92:[2,115],95:[2,115],99:[2,115]},{5:[2,116],92:[2,116],95:[2,116],99:[2,116]},{5:[2,117],92:[2,117],95:[2,117],99:[2,117]},{5:[2,118],92:[2,118],95:[2,118],99:[2,118]},{5:[2,119],92:[2,119],95:[2,119],99:[2,119]},{5:[2,120],92:[2,120],95:[2,120],99:[2,120]},{5:[2,121],92:[2,121],95:[2,121],99:[2,121]},{5:[2,122],92:[2,122],95:[2,122],99:[2,122]},{5:[2,123],92:[2,123],95:[2,123],99:[2,123]},{5:[2,124],92:[2,124],95:[2,124],99:[2,124]},{5:[2,133],92:[2,133],95:[2,133],99:[2,133]},{5:[2,134],92:[2,134],95:[2,134],99:[2,134]},{5:[2,125],92:[2,125],95:[2,125],99:[2,125]},{5:[2,126],92:[2,126],95:[2,126],99:[2,126]},{5:[2,127],92:[2,127],95:[2,127],99:[2,127]},{5:[2,128],92:[2,128],95:[2,128],99:[2,128]},{5:[2,129],92:[2,129],95:[2,129],99:[2,129]},{5:[2,130],92:[2,130],95:[2,130],99:[2,130]},{5:[2,131],92:[2,131],95:[2,131],99:[2,131]},{5:[2,132],92:[2,132],95:[2,132],99:[2,132]},{5:[2,135],92:[2,135],95:[2,135],99:[2,135]},{5:[2,8],92:[2,8],95:[2,8],99:[2,8]},{5:[2,9],92:[2,9],95:[2,9],99:[2,9]},{5:[2,136],92:[2,136],95:[2,136],99:[2,136]},{5:[2,137],92:[2,137],95:[2,137],99:[2,137]},{5:[2,138],92:[2,138],95:[2,138],99:[2,138]},{5:[2,139],92:[2,139],95:[2,139],99:[2,139]},{5:[2,143],92:[2,143],95:[2,143],99:[2,143]},{5:[2,140],92:[2,140],95:[2,140],99:[2,140]},{5:[2,144],92:[2,144],95:[2,144],99:[2,144]},{5:[2,141],92:[2,141],95:[2,141],99:[2,141]},{5:[2,145],92:[2,145],95:[2,145],99:[2,145]},{5:[2,142],92:[2,142],95:[2,142],99:[2,142]},{5:[2,146],92:[2,146],95:[2,146],99:[2,146]},{5:[2,147],92:[2,147],95:[2,147],99:[2,147]},{5:[2,148],92:[2,148],95:[2,148],99:[2,148]},{5:[2,149],92:[2,149],95:[2,149],99:[2,149]},{5:[2,150],92:[2,150],95:[2,150],99:[2,150]},{5:[2,54],92:[2,54],95:[2,54],99:[2,54]},{5:[2,55],92:[2,55],95:[2,55],99:[2,55]},{5:[2,56],92:[2,56],95:[2,56],99:[2,56]},{5:[2,57],92:[2,57],95:[2,57],99:[2,57]},{5:[2,59],73:[1,204],92:[2,59],95:[2,59],99:[2,59]},{5:[2,61],92:[2,61],95:[2,61],99:[2,61]},{75:[1,205],76:[1,206]},{5:[2,64],92:[2,64],95:[2,64],99:[2,64]},{75:[1,207],76:[1,208]},{5:[2,68],92:[2,68],95:[2,68],99:[2,68]},{5:[2,69],92:[2,69],95:[2,69],99:[2,69]},{5:[2,70],92:[2,70],95:[2,70],99:[2,70]},{5:[2,71],92:[2,71],95:[2,71],99:[2,71]},{5:[2,73],73:[1,209],92:[2,73],95:[2,73],99:[2,73]},{5:[2,75],73:[1,210],92:[2,75],95:[2,75],99:[2,75]},{5:[2,78],92:[2,78],95:[2,78],99:[2,78]},{5:[2,81],73:[1,211],92:[2,81],95:[2,81],99:[2,81]},{5:[2,83],92:[2,83],95:[2,83],99:[2,83]},{5:[2,84],92:[2,84],95:[2,84],99:[2,84]},{5:[2,85],73:[1,212],92:[2,85],95:[2,85],99:[2,85]},{5:[2,90],92:[2,90],95:[2,90],99:[2,90]},{5:[2,91],92:[2,91],95:[2,91],99:[2,91]},{5:[2,94],73:[1,213],92:[2,94],95:[2,94],99:[2,94]},{5:[2,96],73:[1,214],92:[2,96],95:[2,96],99:[2,96]},{5:[2,99],92:[2,99],95:[2,99],99:[2,99]},{5:[2,102],92:[2,102],95:[2,102],99:[2,102]},{5:[2,105],92:[2,105],95:[2,105],99:[2,105]},{5:[2,60],92:[2,60],95:[2,60],99:[2,60]},{5:[2,62],92:[2,62],95:[2,62],99:[2,62]},{5:[2,63],92:[2,63],95:[2,63],99:[2,63]},{5:[2,65],92:[2,65],95:[2,65],99:[2,65]},{5:[2,66],92:[2,66],95:[2,66],99:[2,66]},{5:[2,74],92:[2,74],95:[2,74],99:[2,74]},{5:[2,76],92:[2,76],95:[2,76],99:[2,76]},{5:[2,82],92:[2,82],95:[2,82],99:[2,82]},{5:[2,86],92:[2,86],95:[2,86],99:[2,86]},{5:[2,95],92:[2,95],95:[2,95],99:[2,95]},{5:[2,97],92:[2,97],95:[2,97],99:[2,97]}],
defaultActions: {64:[2,1],79:[2,6],80:[2,7],81:[2,2],82:[2,3],83:[2,4],84:[2,5]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};


function parseIpPort(ipPortStr, which) {
  ipPortStr = ipPortStr.trim();
  // Support '10.10.10/16:4321'

  var ip1 = -1, ip2 = -1;
  var colons = ipPortStr.split(':');
  var slash = colons[0].split('/');
  var dots = slash[0].split('.');
  var port = -1;
  if (colons[1]) {
    port = parseInt(colons[1], 10);
  }

  if (dots.length === 4) {
    ip1 = ip2 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16) | (parseInt(dots[2], 10) << 8) | parseInt(dots[3], 10);
  } else if (dots.length === 3) {
    ip1 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16) | (parseInt(dots[2], 10) << 8);
    ip2 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16) | (parseInt(dots[2], 10) << 8) | 255;
  } else if (dots.length === 2) {
    ip1 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16);
    ip2 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16) | (255 << 8) | 255;
  } else if (dots.length === 1 && dots[0].length > 0) {
    ip1 = (parseInt(dots[0], 10) << 24);
    ip2 = (parseInt(dots[0], 10) << 24) | (255 << 16) | (255 << 8) | 255;
  }

  // Can't shift by 32 bits in javascript, who knew!
  if (slash[1] && slash[1] !== '32') {
     var s = parseInt(slash[1], 10);
     ip1 = ip1 & (0xffffffff << (32 - s));
     ip2 = ip2 | (0xffffffff >>> s);
  }

  var t1 = {and: []};
  var t2 = {and: []};
  var xff;
  var dns;

  if (ip1 !== -1) {
    if (ip1 === ip2) {
        t1.and.push({term: {a1: ip1>>>0}});
        t2.and.push({term: {a2: ip1>>>0}});
        xff = {term: {xff: ip1>>>0}};
        dns = {term: {dnsip: ip1>>>0}};
    } else {
        t1.and.push({range: {a1: {from: ip1>>>0, to: ip2>>>0}}});
        t2.and.push({range: {a2: {from: ip1>>>0, to: ip2>>>0}}});
        xff =  {range: {xff: {from: ip1>>>0, to: ip2>>>0}}};
        dns =  {range: {dnsip: {from: ip1>>>0, to: ip2>>>0}}};
    }
  }

  if (port !== -1) {
    t1.and.push({term: {p1: port}});
    t2.and.push({term: {p2: port}});
  }

  if (t1.and.length === 1) {
      t1 = t1.and[0];
      t2 = t2.and[0];
  }

  switch(which) {
  case 0:
    if (xff)
        return {or: [t1, t2, xff]};
    else
        return {or: [t1, t2]};
  case 1:
    return t1;
  case 2:
    return t2;
  case 3:
    if (!xff)
        throw "xff doesn't support port only";
    return xff;
  case 4:
    if (!dns)
        throw "dns doesn't support port only";
    return dns;
  }
}

function stripQuotes (str) {
  if (str[0] === "\"") {
    str =  str.substring(1, str.length-1);
  }
  return str;
}
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {"flex":true};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 15
break;
case 2:return 14
break;
case 3:return 66
break;
case 4:return 55
break;
case 5:return 54
break;
case 6:return 53
break;
case 7:return 'asn.xff'
break;
case 8:return 18
break;
case 9:return "cert.alt.cnt"
break;
case 10:return "cert.alt"
break;
case 11:return "cert.cnt"
break;
case 12:return "cert.issuer.cn"
break;
case 13:return "cert.issuer.on"
break;
case 14:return "cert.serial"
break;
case 15:return "cert.subject.cn"
break;
case 16:return "cert.subject.on"
break;
case 17:return 79
break;
case 18:return 51
break;
case 19:return 50
break;
case 20:return 49
break;
case 21:return 'country.xff'
break;
case 22:return 17
break;
case 23:return "header.dst.cnt"
break;
case 24:return "header.dst"
break;
case 25:return "header"
break;
case 26:return "header.src.cnt"
break;
case 27:return "header.src"
break;
case 28:return "host.cnt"
break;
case 29:return "host"
break;
case 30:return "icmp"
break;
case 31:return "id"
break;
case 32:return "ip.dns.cnt"
break;
case 33:return "ip.dns"
break;
case 34:return "ip.dst"
break;
case 35:return "ip"
break;
case 36:return "ip.src"
break;
case 37:return "ip.xff.cnt"
break;
case 38:return "ip.xff"
break;
case 39:return 37
break;
case 40:return "oldheader"
break;
case 41:return 19
break;
case 42:return 22
break;
case 43:return 82
break;
case 44:return 21
break;
case 45:return 20
break;
case 46:return "ssh.key.cnt"
break;
case 47:return "ssh.key"
break;
case 48:return "ssh.ver.cnt"
break;
case 49:return "ssh.ver"
break;
case 50:return 32
break;
case 51:return 87
break;
case 52:return "tcp"
break;
case 53:return "ua.cnt"
break;
case 54:return "ua"
break;
case 55:return "udp"
break;
case 56:return "uri.cnt"
break;
case 57:return "uri"
break;
case 58:return "user.cnt"
break;
case 59:return "user"
break;
case 60:return 65
break;
case 61:return 83
break;
case 62:return 8
break;
case 63:return 7
break;
case 64:return 11
break;
case 65:return 10
break;
case 66:return 94
break;
case 67:return 93
break;
case 68:return 93
break;
case 69:return 95
break;
case 70:return 95
break;
case 71:return 92
break;
case 72:return 92
break;
case 73:return 98
break;
case 74:return 99
break;
case 75:return 96
break;
case 76:return 5
break;
case 77:return 'INVALID'
break;
case 78:console.log(yy_.yytext);
break;
}
};
lexer.rules = [/^(?:\s+)/,/^(?:[0-9]+\b)/,/^(?:([0-9]{1,3})?(\.[0-9]{1,3})?(\.[0-9]{1,3})?(\.[0-9]{1,3})?(\/[0-9]{1,2})?(:[0-9]{1,5})?\b)/,/^(?:asn)/,/^(?:asn\.dns)/,/^(?:asn\.dst)/,/^(?:asn\.src)/,/^(?:asn\.xff)/,/^(?:bytes)/,/^(?:cert\.alt\.cnt)/,/^(?:cert\.alt)/,/^(?:cert\.cnt)/,/^(?:cert\.issuer\.cn)/,/^(?:cert\.issuer\.on)/,/^(?:cert\.serial)/,/^(?:cert\.subject\.cn)/,/^(?:cert\.subject\.on)/,/^(?:country)/,/^(?:country\.dns)/,/^(?:country\.dst)/,/^(?:country\.src)/,/^(?:country\.xff)/,/^(?:databytes)/,/^(?:header\.dst\.cnt)/,/^(?:header\.dst)/,/^(?:header)/,/^(?:header\.src\.cnt)/,/^(?:header\.src)/,/^(?:host\.cnt)/,/^(?:host)/,/^(?:icmp)/,/^(?:id)/,/^(?:ip\.dns\.cnt)/,/^(?:ip\.dns)/,/^(?:ip\.dst)/,/^(?:ip)/,/^(?:ip\.src)/,/^(?:ip\.xff\.cnt)/,/^(?:ip\.xff)/,/^(?:node)/,/^(?:oldheader)/,/^(?:packets)/,/^(?:port\.dst)/,/^(?:port)/,/^(?:port\.src)/,/^(?:protocol)/,/^(?:ssh\.key\.cnt)/,/^(?:ssh\.key)/,/^(?:ssh\.ver\.cnt)/,/^(?:ssh\.ver)/,/^(?:tags\.cnt)/,/^(?:tags)/,/^(?:tcp)/,/^(?:ua\.cnt)/,/^(?:ua)/,/^(?:udp)/,/^(?:uri\.cnt)/,/^(?:uri)/,/^(?:user\.cnt)/,/^(?:user)/,/^(?:[/\w*._:-]+)/,/^(?:"[^"]+")/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\()/,/^(?:\))/,/^(?:!)/,/^(?:$)/,/^(?:.)/,/^(?:.)/];
lexer.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = molochparser;
exports.Parser = molochparser.Parser;
exports.parse = function () { return molochparser.parse.apply(molochparser, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}