/* Jison generated parser */
var molochparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"e":4,"EOF":5,"LTA":6,"lt":7,"lte":8,"GTA":9,"gt":10,"gte":11,"GTLT":12,"IPNUM":13,"IPMATCH":14,"NUMBER":15,"RANGEFIELD":16,"databytes":17,"bytes":18,"packets":19,"protocol":20,"port.src":21,"port.dst":22,"uri.cnt":23,"cert.cnt":24,"ip.xff.cnt":25,"ua.cnt":26,"user.cnt":27,"host.cnt":28,"header.src.cnt":29,"header.dst.cnt":30,"tags.cnt":31,"cert.alt.cnt":32,"ssh.key.cnt":33,"ssh.ver.cnt":34,"TERMFIELD":35,"node":36,"host":37,"user":38,"cert.subject.cn":39,"cert.issuer.cn":40,"cert.serial":41,"cert.alt":42,"ssh.ver":43,"UPTERMFIELD":44,"country.src":45,"country.dst":46,"country.xff":47,"TEXTFIELD":48,"asn.src":49,"asn.dst":50,"asn.xff":51,"cert.subject.on":52,"cert.issuer.on":53,"STR":54,"ID":55,"port":56,"src":57,"dst":58,"country":59,"xff":60,"asn":61,"cert":62,"issuer":63,"cn":64,"on":65,"subject":66,"alt":67,"cnt":68,"serial":69,"QUOTEDSTR":70,"header":71,"icmp":72,"tcp":73,"udp":74,"ip":75,"uri":76,"ua":77,"tags":78,"ssh":79,"key":80,"ver":81,"&&":82,"==":83,"!=":84,"||":85,"!":86,"-":87,"(":88,")":89,"ip.src":90,"ip.dst":91,"ip.xff":92,"oldheader":93,"header.src":94,"header.dst":95,"ssh.key":96,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"lt",8:"lte",10:"gt",11:"gte",14:"IPMATCH",15:"NUMBER",17:"databytes",18:"bytes",19:"packets",20:"protocol",21:"port.src",22:"port.dst",23:"uri.cnt",24:"cert.cnt",25:"ip.xff.cnt",26:"ua.cnt",27:"user.cnt",28:"host.cnt",29:"header.src.cnt",30:"header.dst.cnt",31:"tags.cnt",32:"cert.alt.cnt",33:"ssh.key.cnt",34:"ssh.ver.cnt",36:"node",37:"host",38:"user",39:"cert.subject.cn",40:"cert.issuer.cn",41:"cert.serial",42:"cert.alt",43:"ssh.ver",45:"country.src",46:"country.dst",47:"country.xff",49:"asn.src",50:"asn.dst",51:"asn.xff",52:"cert.subject.on",53:"cert.issuer.on",55:"ID",56:"port",57:"src",58:"dst",59:"country",60:"xff",61:"asn",62:"cert",63:"issuer",64:"cn",65:"on",66:"subject",67:"alt",68:"cnt",69:"serial",70:"QUOTEDSTR",71:"header",72:"icmp",73:"tcp",74:"udp",75:"ip",76:"uri",77:"ua",78:"tags",79:"ssh",80:"key",81:"ver",82:"&&",83:"==",84:"!=",85:"||",86:"!",87:"-",88:"(",89:")",90:"ip.src",91:"ip.dst",92:"ip.xff",93:"oldheader",94:"header.src",95:"header.dst",96:"ssh.key"},
productions_: [0,[3,2],[6,1],[6,1],[9,1],[9,1],[12,1],[12,1],[13,1],[13,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[44,1],[44,1],[44,1],[48,1],[48,1],[48,1],[48,1],[48,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,2],[54,2],[54,1],[54,2],[54,2],[54,2],[54,1],[54,2],[54,2],[54,2],[54,3],[54,3],[54,3],[54,3],[54,2],[54,3],[54,2],[54,2],[54,1],[54,1],[54,1],[54,2],[54,1],[54,2],[54,3],[54,2],[54,3],[54,1],[54,1],[54,1],[54,1],[54,2],[54,2],[54,2],[54,3],[54,1],[54,2],[54,1],[54,2],[54,1],[54,2],[54,2],[54,3],[54,2],[54,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2:this.$ = 'lt'
break;
case 3:this.$ = 'lte'
break;
case 4:this.$ = 'gt'
break;
case 5:this.$ = 'gte'
break;
case 10:this.$ = 'db'
break;
case 11:this.$ = 'by'
break;
case 12:this.$ = 'pa'
break;
case 13:this.$ = 'pr'
break;
case 14:this.$ = 'p1'
break;
case 15:this.$ = 'p2'
break;
case 16:this.$ = 'uscnt'
break;
case 17:this.$ = 'tlscnt'
break;
case 18:this.$ = 'xffcnt'
break;
case 19:this.$ = 'uacnt'
break;
case 20:this.$ = 'usercnt'
break;
case 21:this.$ = 'hocnt'
break;
case 22:this.$ = 'hh1cnt'
break;
case 23:this.$ = 'hh2cnt'
break;
case 24:this.$ = 'tacnt'
break;
case 25:this.$ = 'tls.altcnt'
break;
case 26:this.$ = 'sshkeycnt'
break;
case 27:this.$ = 'sshvercnt'
break;
case 28:this.$ = 'no'
break;
case 29:this.$ = 'ho'
break;
case 30:this.$ = 'user'
break;
case 31:this.$ = 'tls.sCn'
break;
case 32:this.$ = 'tls.iCn'
break;
case 33:this.$ = 'tls.sn'
break;
case 34:this.$ = 'tls.alt'
break;
case 35:this.$ = 'sshver'
break;
case 36:this.$ = 'g1'
break;
case 37:this.$ = 'g2'
break;
case 38:this.$ = 'gxff'
break;
case 39:this.$ = 'as1'
break;
case 40:this.$ = 'as2'
break;
case 41:this.$ = 'asxff'
break;
case 42:this.$ = 'tls.sOn'
break;
case 43:this.$ = 'tls.iOn'
break;
case 94:this.$ = {and: [$$[$0-2], $$[$0]]};
break;
case 95:this.$ = {query: {text: {us: {query: $$[$0], type: "phrase", operator: "and"}}}};
break;
case 96:this.$ = {not: {query: {text: {us: {query: $$[$0], type: "phrase", operator: "and"}}}}};
break;
case 97:this.$ = {query: {text: {ua: {query: $$[$0], type: "phrase", operator: "and"}}}};
break;
case 98:this.$ = {not: {query: {text: {ua: {query: $$[$0], type: "phrase", operator: "and"}}}}};
break;
case 99:this.$ = {or: [$$[$0-2], $$[$0]]};
break;
case 100:this.$ = {not: $$[$0]};
break;
case 101:this.$ = -$$[$0];
break;
case 102:this.$ = $$[$0-1];
break;
case 103:this.$ = {term: {pr: 1}};
break;
case 104:this.$ = {term: {pr: 6}};
break;
case 105:this.$ = {term: {pr: 17}};
break;
case 106:this.$ = {not: {term: {pr: 1}}};
break;
case 107:this.$ = {not: {term: {pr: 6}}};
break;
case 108:this.$ = {not: {term: {pr: 17}}};
break;
case 109:this.$ = {range: {}};
         this.$.range[$$[$0-2]] = {};
         this.$.range[$$[$0-2]][$$[$0-1]] = $$[$0];
break;
case 110:this.$ = {term: {}};
         this.$.term[$$[$0-2]] = $$[$0];
break;
case 111:this.$ = {not: {term: {}}};
         this.$.not.term[$$[$0-2]] = $$[$0];
break;
case 112:this.$ = {or: [{range: {p1: {}}}, {range: {p2: {}}}]};
         this.$.or[0].range.p1[$$[$0-1]] = $$[$0];
         this.$.or[1].range.p2[$$[$0-1]] = $$[$0];
break;
case 113: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {query: {wildcard: {}}}};
            this.$.not.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {not: {term: {}}};
            this.$.not.term[$$[$0-2]] = str;
          }
        
break;
case 114: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {query: {wildcard: {}}};
            this.$.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {term: {}};
            this.$.term[$$[$0-2]] = str;
          }
        
break;
case 115: var str = stripQuotes($$[$0]).toUpperCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {query: {wildcard: {}}}};
            this.$.not.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {not: {term: {}}};
            this.$.not.term[$$[$0-2]] = str;
          }
        
break;
case 116: var str = stripQuotes($$[$0]).toUpperCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {query: {wildcard: {}}};
            this.$.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {term: {}};
            this.$.term[$$[$0-2]] = str;
          }
        
break;
case 117: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {query: {wildcard: {}}}};
            this.$.not.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {not: {query: {text: {}}}};
            this.$.not.query.text[$$[$0-2]] = {query: str, type: "phrase", operator: "and"}
          }
        
break;
case 118: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {query: {wildcard: {}}};
            this.$.query.wildcard[$$[$0-2]] = str;
          } else {
            this.$ = {query: {text: {}}};
            this.$.query.text[$$[$0-2]] = {query: str, type: "phrase", operator: "and"}
          }
        
break;
case 119:this.$ = {or: [{term: {p1: $$[$0]}}, {term: {p2: $$[$0]}}]};
break;
case 120:this.$ = {not: {or: [{term: {p1: $$[$0]}}, {term: {p2: $$[$0]}}]}};
break;
case 121:this.$ = parseIpPort($$[$0],0);
break;
case 122:this.$ = {not: parseIpPort($$[$0],0)};
break;
case 123:this.$ = parseIpPort($$[$0],1);
break;
case 124:this.$ = {not: parseIpPort($$[$0],1)};
break;
case 125:this.$ = parseIpPort($$[$0],2);
break;
case 126:this.$ = {not: parseIpPort($$[$0],2)};
break;
case 127:this.$ = parseIpPort($$[$0],3);
break;
case 128:this.$ = {not: parseIpPort($$[$0],3)};
break;
case 129: var tag = stripQuotes($$[$0]);
          this.$ = {term: {ta: tag}};
        
break;
case 130: var tag = stripQuotes($$[$0]);
          this.$ = {not: {term: {ta: tag}}};
        
break;
case 131: var tag = stripQuotes($$[$0]);
          this.$ = {term: {hh: tag}};
        
break;
case 132: var tag = stripQuotes($$[$0]);
          this.$ = {or: [{term: {hh1: tag}}, {term:{hh2: tag}}]};
        
break;
case 133: var tag = stripQuotes($$[$0]);
          this.$ = {term: {hh1: tag}};
        
break;
case 134: var tag = stripQuotes($$[$0]);
          this.$ = {term: {hh2: tag}};
        
break;
case 135: var tag = stripQuotes($$[$0]);
          this.$ = {not: {term: {hh1: tag}}};
        
break;
case 136: var tag = stripQuotes($$[$0]);
          this.$ = {not: {or: [{term: {hh1: tag}}, {term:{hh2: tag}}]}};
        
break;
case 137: var tag = stripQuotes($$[$0]);
          this.$ = {not: {term: {hh1: tag}}};
        
break;
case 138: var tag = stripQuotes($$[$0]);
          this.$ = {not: {term: {hh2: tag}}};
        
break;
case 139: var str = stripQuotes($$[$0]).toUpperCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {or: [{query: {wildcard: {g1: str}}}, {query: {wildcard: {g2: str}}}, {query: {wildcard: {gxff: str}}}]};
          } else {
            this.$ = {or: [{term: {g1: str}}, {term: {g2: str}}, {term: {gxff: str}}]};
          }
        
break;
case 140: var str = stripQuotes($$[$0]).toUpperCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {or: [{query: {wildcard: {g1: str}}}, {query: {wildcard: {g2: str}}}, {query: {wildcard: {gxff: str}}}]}};
          } else {
            this.$ = {not: {or: [{term: {g1: str}}, {term: {g2: str}}, {term: {gxff: str}}]}};
          }
        
break;
case 141: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {or: [{query: {wildcard: {as1: str}}}, {query: {wildcard: {as2: str}}}, {query: {wildcard: {asxff: str}}}]};
          } else {
            this.$ = {or: [{query: {text: {as1:   {query: str, type: "phrase", operator: "and"}}}}, 
                       {query: {text: {as2:   {query: str, type: "phrase", operator: "and"}}}}, 
                       {query: {text: {asxff: {query: str, type: "phrase", operator: "and"}}}}
                      ]
                 };
          }
        
break;
case 142: var str = stripQuotes($$[$0]).toLowerCase();
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {or: [{query: {wildcard: {as1: str}}}, {query: {wildcard: {as2: str}}}, {query: {wildcard: {asxff: str}}}]}};
          } else {
            this.$ = {not: {or: [{query: {text: {as1:   {query: str, type: "phrase", operator: "and"}}}}, 
                             {query: {text: {as2:   {query: str, type: "phrase", operator: "and"}}}}, 
                             {query: {text: {asxff: {query: str, type: "phrase", operator: "and"}}}}
                            ]
                 }};
          }
        
break;
case 143: var str = stripQuotes($$[$0]);
          if (str.indexOf("*") !== -1) {
            this.$ = {not: {query: {wildcard: {}}}};
            this.$.not.query.wildcard.sshkey = str;
          } else {
            this.$ = {not: {term: {}}};
            this.$.not.term.sshkey = str;
          }
        
break;
case 144: var str = stripQuotes($$[$0]);
          if (str.indexOf("*") !== -1) {
            this.$ = {query: {wildcard: {}}};
            this.$.query.wildcard.sshkey = str;
          } else {
            this.$ = {term: {}};
            this.$.term.sshkey = str;
          }
        
break;
}
},
table: [{3:1,4:2,16:9,17:[1,26],18:[1,27],19:[1,28],20:[1,8],21:[1,29],22:[1,30],23:[1,31],24:[1,32],25:[1,33],26:[1,34],27:[1,35],28:[1,36],29:[1,37],30:[1,38],31:[1,39],32:[1,40],33:[1,41],34:[1,42],35:11,36:[1,43],37:[1,44],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:12,45:[1,51],46:[1,52],47:[1,53],48:13,49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],56:[1,10],59:[1,23],61:[1,24],71:[1,20],75:[1,14],76:[1,3],77:[1,4],78:[1,18],86:[1,5],87:[1,6],88:[1,7],90:[1,15],91:[1,16],92:[1,17],93:[1,19],94:[1,21],95:[1,22],96:[1,25]},{1:[3]},{5:[1,59],82:[1,60],85:[1,61]},{83:[1,62],84:[1,63]},{83:[1,64],84:[1,65]},{4:66,16:9,17:[1,26],18:[1,27],19:[1,28],20:[1,8],21:[1,29],22:[1,30],23:[1,31],24:[1,32],25:[1,33],26:[1,34],27:[1,35],28:[1,36],29:[1,37],30:[1,38],31:[1,39],32:[1,40],33:[1,41],34:[1,42],35:11,36:[1,43],37:[1,44],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:12,45:[1,51],46:[1,52],47:[1,53],48:13,49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],56:[1,10],59:[1,23],61:[1,24],71:[1,20],75:[1,14],76:[1,3],77:[1,4],78:[1,18],86:[1,5],87:[1,6],88:[1,7],90:[1,15],91:[1,16],92:[1,17],93:[1,19],94:[1,21],95:[1,22],96:[1,25]},{4:67,16:9,17:[1,26],18:[1,27],19:[1,28],20:[1,8],21:[1,29],22:[1,30],23:[1,31],24:[1,32],25:[1,33],26:[1,34],27:[1,35],28:[1,36],29:[1,37],30:[1,38],31:[1,39],32:[1,40],33:[1,41],34:[1,42],35:11,36:[1,43],37:[1,44],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:12,45:[1,51],46:[1,52],47:[1,53],48:13,49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],56:[1,10],59:[1,23],61:[1,24],71:[1,20],75:[1,14],76:[1,3],77:[1,4],78:[1,18],86:[1,5],87:[1,6],88:[1,7],90:[1,15],91:[1,16],92:[1,17],93:[1,19],94:[1,21],95:[1,22],96:[1,25]},{4:68,16:9,17:[1,26],18:[1,27],19:[1,28],20:[1,8],21:[1,29],22:[1,30],23:[1,31],24:[1,32],25:[1,33],26:[1,34],27:[1,35],28:[1,36],29:[1,37],30:[1,38],31:[1,39],32:[1,40],33:[1,41],34:[1,42],35:11,36:[1,43],37:[1,44],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:12,45:[1,51],46:[1,52],47:[1,53],48:13,49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],56:[1,10],59:[1,23],61:[1,24],71:[1,20],75:[1,14],76:[1,3],77:[1,4],78:[1,18],86:[1,5],87:[1,6],88:[1,7],90:[1,15],91:[1,16],92:[1,17],93:[1,19],94:[1,21],95:[1,22],96:[1,25]},{7:[2,13],8:[2,13],10:[2,13],11:[2,13],83:[1,69],84:[1,70]},{6:74,7:[1,76],8:[1,77],9:75,10:[1,78],11:[1,79],12:71,83:[1,72],84:[1,73]},{6:74,7:[1,76],8:[1,77],9:75,10:[1,78],11:[1,79],12:80,83:[1,81],84:[1,82]},{83:[1,84],84:[1,83]},{83:[1,86],84:[1,85]},{83:[1,88],84:[1,87]},{83:[1,89],84:[1,90]},{83:[1,91],84:[1,92]},{83:[1,93],84:[1,94]},{83:[1,95],84:[1,96]},{83:[1,97],84:[1,98]},{83:[1,99],84:[1,100]},{83:[1,101],84:[1,102]},{83:[1,103],84:[1,104]},{83:[1,105],84:[1,106]},{83:[1,107],84:[1,108]},{83:[1,109],84:[1,110]},{83:[1,112],84:[1,111]},{7:[2,10],8:[2,10],10:[2,10],11:[2,10],83:[2,10],84:[2,10]},{7:[2,11],8:[2,11],10:[2,11],11:[2,11],83:[2,11],84:[2,11]},{7:[2,12],8:[2,12],10:[2,12],11:[2,12],83:[2,12],84:[2,12]},{7:[2,14],8:[2,14],10:[2,14],11:[2,14],83:[2,14],84:[2,14]},{7:[2,15],8:[2,15],10:[2,15],11:[2,15],83:[2,15],84:[2,15]},{7:[2,16],8:[2,16],10:[2,16],11:[2,16],83:[2,16],84:[2,16]},{7:[2,17],8:[2,17],10:[2,17],11:[2,17],83:[2,17],84:[2,17]},{7:[2,18],8:[2,18],10:[2,18],11:[2,18],83:[2,18],84:[2,18]},{7:[2,19],8:[2,19],10:[2,19],11:[2,19],83:[2,19],84:[2,19]},{7:[2,20],8:[2,20],10:[2,20],11:[2,20],83:[2,20],84:[2,20]},{7:[2,21],8:[2,21],10:[2,21],11:[2,21],83:[2,21],84:[2,21]},{7:[2,22],8:[2,22],10:[2,22],11:[2,22],83:[2,22],84:[2,22]},{7:[2,23],8:[2,23],10:[2,23],11:[2,23],83:[2,23],84:[2,23]},{7:[2,24],8:[2,24],10:[2,24],11:[2,24],83:[2,24],84:[2,24]},{7:[2,25],8:[2,25],10:[2,25],11:[2,25],83:[2,25],84:[2,25]},{7:[2,26],8:[2,26],10:[2,26],11:[2,26],83:[2,26],84:[2,26]},{7:[2,27],8:[2,27],10:[2,27],11:[2,27],83:[2,27],84:[2,27]},{83:[2,28],84:[2,28]},{83:[2,29],84:[2,29]},{83:[2,30],84:[2,30]},{83:[2,31],84:[2,31]},{83:[2,32],84:[2,32]},{83:[2,33],84:[2,33]},{83:[2,34],84:[2,34]},{83:[2,35],84:[2,35]},{83:[2,36],84:[2,36]},{83:[2,37],84:[2,37]},{83:[2,38],84:[2,38]},{83:[2,39],84:[2,39]},{83:[2,40],84:[2,40]},{83:[2,41],84:[2,41]},{83:[2,42],84:[2,42]},{83:[2,43],84:[2,43]},{1:[2,1]},{4:113,16:9,17:[1,26],18:[1,27],19:[1,28],20:[1,8],21:[1,29],22:[1,30],23:[1,31],24:[1,32],25:[1,33],26:[1,34],27:[1,35],28:[1,36],29:[1,37],30:[1,38],31:[1,39],32:[1,40],33:[1,41],34:[1,42],35:11,36:[1,43],37:[1,44],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:12,45:[1,51],46:[1,52],47:[1,53],48:13,49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],56:[1,10],59:[1,23],61:[1,24],71:[1,20],75:[1,14],76:[1,3],77:[1,4],78:[1,18],86:[1,5],87:[1,6],88:[1,7],90:[1,15],91:[1,16],92:[1,17],93:[1,19],94:[1,21],95:[1,22],96:[1,25]},{4:114,16:9,17:[1,26],18:[1,27],19:[1,28],20:[1,8],21:[1,29],22:[1,30],23:[1,31],24:[1,32],25:[1,33],26:[1,34],27:[1,35],28:[1,36],29:[1,37],30:[1,38],31:[1,39],32:[1,40],33:[1,41],34:[1,42],35:11,36:[1,43],37:[1,44],38:[1,45],39:[1,46],40:[1,47],41:[1,48],42:[1,49],43:[1,50],44:12,45:[1,51],46:[1,52],47:[1,53],48:13,49:[1,54],50:[1,55],51:[1,56],52:[1,57],53:[1,58],56:[1,10],59:[1,23],61:[1,24],71:[1,20],75:[1,14],76:[1,3],77:[1,4],78:[1,18],86:[1,5],87:[1,6],88:[1,7],90:[1,15],91:[1,16],92:[1,17],93:[1,19],94:[1,21],95:[1,22],96:[1,25]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:115,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:136,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:137,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:138,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{5:[2,100],82:[2,100],85:[2,100],89:[2,100]},{5:[2,101],82:[2,101],85:[2,101],89:[2,101]},{82:[1,60],85:[1,61],89:[1,139]},{72:[1,140],73:[1,141],74:[1,142]},{72:[1,143],73:[1,144],74:[1,145]},{15:[1,146]},{15:[1,147]},{15:[1,148]},{15:[2,6]},{15:[2,7]},{15:[2,2]},{15:[2,3]},{15:[2,4]},{15:[2,5]},{15:[1,149]},{15:[1,150]},{15:[1,151]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:152,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:153,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:154,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:155,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:156,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:157,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{13:158,14:[1,159],15:[1,160]},{13:161,14:[1,159],15:[1,160]},{13:162,14:[1,159],15:[1,160]},{13:163,14:[1,159],15:[1,160]},{13:164,14:[1,159],15:[1,160]},{13:165,14:[1,159],15:[1,160]},{13:166,14:[1,159],15:[1,160]},{13:167,14:[1,159],15:[1,160]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:168,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:169,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:170,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:171,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:172,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:173,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:174,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:175,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:176,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:177,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:178,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:179,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:180,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:181,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:182,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{18:[1,118],19:[1,117],20:[1,119],36:[1,125],37:[1,126],54:183,55:[1,116],56:[1,120],59:[1,121],61:[1,122],62:[1,123],70:[1,124],71:[1,127],72:[1,128],73:[1,129],74:[1,130],75:[1,131],76:[1,132],77:[1,133],78:[1,134],79:[1,135]},{5:[2,94],82:[2,94],85:[2,94],89:[2,94]},{5:[2,99],82:[1,60],85:[2,99],89:[2,99]},{5:[2,95],82:[2,95],85:[2,95],89:[2,95]},{5:[2,44],82:[2,44],85:[2,44],89:[2,44]},{5:[2,45],82:[2,45],85:[2,45],89:[2,45]},{5:[2,46],82:[2,46],85:[2,46],89:[2,46]},{5:[2,47],82:[2,47],85:[2,47],89:[2,47]},{5:[2,48],57:[1,184],58:[1,185],82:[2,48],85:[2,48],89:[2,48]},{5:[2,51],57:[1,186],58:[1,187],60:[1,188],82:[2,51],85:[2,51],89:[2,51]},{5:[2,55],57:[1,189],58:[1,190],60:[1,191],82:[2,55],85:[2,55],89:[2,55]},{63:[1,192],66:[1,193],67:[1,194],68:[1,196],69:[1,195]},{5:[2,67],82:[2,67],85:[2,67],89:[2,67]},{5:[2,68],82:[2,68],85:[2,68],89:[2,68]},{5:[2,69],68:[1,197],82:[2,69],85:[2,69],89:[2,69]},{5:[2,71],57:[1,198],58:[1,199],82:[2,71],85:[2,71],89:[2,71]},{5:[2,76],82:[2,76],85:[2,76],89:[2,76]},{5:[2,77],82:[2,77],85:[2,77],89:[2,77]},{5:[2,78],82:[2,78],85:[2,78],89:[2,78]},{5:[2,79],57:[1,200],58:[1,201],60:[1,202],82:[2,79],85:[2,79],89:[2,79]},{5:[2,84],68:[1,203],82:[2,84],85:[2,84],89:[2,84]},{5:[2,86],68:[1,204],82:[2,86],85:[2,86],89:[2,86]},{5:[2,88],68:[1,205],82:[2,88],85:[2,88],89:[2,88]},{80:[1,206],81:[1,207]},{5:[2,96],82:[2,96],85:[2,96],89:[2,96]},{5:[2,97],82:[2,97],85:[2,97],89:[2,97]},{5:[2,98],82:[2,98],85:[2,98],89:[2,98]},{5:[2,102],82:[2,102],85:[2,102],89:[2,102]},{5:[2,103],82:[2,103],85:[2,103],89:[2,103]},{5:[2,104],82:[2,104],85:[2,104],89:[2,104]},{5:[2,105],82:[2,105],85:[2,105],89:[2,105]},{5:[2,106],82:[2,106],85:[2,106],89:[2,106]},{5:[2,107],82:[2,107],85:[2,107],89:[2,107]},{5:[2,108],82:[2,108],85:[2,108],89:[2,108]},{5:[2,109],82:[2,109],85:[2,109],89:[2,109]},{5:[2,110],82:[2,110],85:[2,110],89:[2,110]},{5:[2,111],82:[2,111],85:[2,111],89:[2,111]},{5:[2,112],82:[2,112],85:[2,112],89:[2,112]},{5:[2,119],82:[2,119],85:[2,119],89:[2,119]},{5:[2,120],82:[2,120],85:[2,120],89:[2,120]},{5:[2,113],82:[2,113],85:[2,113],89:[2,113]},{5:[2,114],82:[2,114],85:[2,114],89:[2,114]},{5:[2,115],82:[2,115],85:[2,115],89:[2,115]},{5:[2,116],82:[2,116],85:[2,116],89:[2,116]},{5:[2,117],82:[2,117],85:[2,117],89:[2,117]},{5:[2,118],82:[2,118],85:[2,118],89:[2,118]},{5:[2,121],82:[2,121],85:[2,121],89:[2,121]},{5:[2,8],82:[2,8],85:[2,8],89:[2,8]},{5:[2,9],82:[2,9],85:[2,9],89:[2,9]},{5:[2,122],82:[2,122],85:[2,122],89:[2,122]},{5:[2,123],82:[2,123],85:[2,123],89:[2,123]},{5:[2,124],82:[2,124],85:[2,124],89:[2,124]},{5:[2,125],82:[2,125],85:[2,125],89:[2,125]},{5:[2,126],82:[2,126],85:[2,126],89:[2,126]},{5:[2,127],82:[2,127],85:[2,127],89:[2,127]},{5:[2,128],82:[2,128],85:[2,128],89:[2,128]},{5:[2,129],82:[2,129],85:[2,129],89:[2,129]},{5:[2,130],82:[2,130],85:[2,130],89:[2,130]},{5:[2,131],82:[2,131],85:[2,131],89:[2,131]},{5:[2,135],82:[2,135],85:[2,135],89:[2,135]},{5:[2,132],82:[2,132],85:[2,132],89:[2,132]},{5:[2,136],82:[2,136],85:[2,136],89:[2,136]},{5:[2,133],82:[2,133],85:[2,133],89:[2,133]},{5:[2,137],82:[2,137],85:[2,137],89:[2,137]},{5:[2,134],82:[2,134],85:[2,134],89:[2,134]},{5:[2,138],82:[2,138],85:[2,138],89:[2,138]},{5:[2,139],82:[2,139],85:[2,139],89:[2,139]},{5:[2,140],82:[2,140],85:[2,140],89:[2,140]},{5:[2,141],82:[2,141],85:[2,141],89:[2,141]},{5:[2,142],82:[2,142],85:[2,142],89:[2,142]},{5:[2,143],82:[2,143],85:[2,143],89:[2,143]},{5:[2,144],82:[2,144],85:[2,144],89:[2,144]},{5:[2,49],82:[2,49],85:[2,49],89:[2,49]},{5:[2,50],82:[2,50],85:[2,50],89:[2,50]},{5:[2,52],82:[2,52],85:[2,52],89:[2,52]},{5:[2,53],82:[2,53],85:[2,53],89:[2,53]},{5:[2,54],82:[2,54],85:[2,54],89:[2,54]},{5:[2,56],82:[2,56],85:[2,56],89:[2,56]},{5:[2,57],82:[2,57],85:[2,57],89:[2,57]},{5:[2,58],82:[2,58],85:[2,58],89:[2,58]},{64:[1,208],65:[1,209]},{64:[1,210],65:[1,211]},{5:[2,63],68:[1,212],82:[2,63],85:[2,63],89:[2,63]},{5:[2,65],82:[2,65],85:[2,65],89:[2,65]},{5:[2,66],82:[2,66],85:[2,66],89:[2,66]},{5:[2,70],82:[2,70],85:[2,70],89:[2,70]},{5:[2,72],68:[1,213],82:[2,72],85:[2,72],89:[2,72]},{5:[2,74],68:[1,214],82:[2,74],85:[2,74],89:[2,74]},{5:[2,80],82:[2,80],85:[2,80],89:[2,80]},{5:[2,81],82:[2,81],85:[2,81],89:[2,81]},{5:[2,82],68:[1,215],82:[2,82],85:[2,82],89:[2,82]},{5:[2,85],82:[2,85],85:[2,85],89:[2,85]},{5:[2,87],82:[2,87],85:[2,87],89:[2,87]},{5:[2,89],82:[2,89],85:[2,89],89:[2,89]},{5:[2,90],68:[1,216],82:[2,90],85:[2,90],89:[2,90]},{5:[2,92],68:[1,217],82:[2,92],85:[2,92],89:[2,92]},{5:[2,59],82:[2,59],85:[2,59],89:[2,59]},{5:[2,60],82:[2,60],85:[2,60],89:[2,60]},{5:[2,61],82:[2,61],85:[2,61],89:[2,61]},{5:[2,62],82:[2,62],85:[2,62],89:[2,62]},{5:[2,64],82:[2,64],85:[2,64],89:[2,64]},{5:[2,73],82:[2,73],85:[2,73],89:[2,73]},{5:[2,75],82:[2,75],85:[2,75],89:[2,75]},{5:[2,83],82:[2,83],85:[2,83],89:[2,83]},{5:[2,91],82:[2,91],85:[2,91],89:[2,91]},{5:[2,93],82:[2,93],85:[2,93],89:[2,93]}],
defaultActions: {59:[2,1],74:[2,6],75:[2,7],76:[2,2],77:[2,3],78:[2,4],79:[2,5]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};


function parseIpPort(ipPortStr, which) {
  ipPortStr = ipPortStr.trim();
  // Support '10.10.10/16:4321'

  var ip1 = -1, ip2 = -1;
  var colons = ipPortStr.split(':');
  var slash = colons[0].split('/');
  var dots = slash[0].split('.');
  var port = -1;
  if (colons[1]) {
    port = parseInt(colons[1], 10);
  }

  if (dots.length === 4) {
    ip1 = ip2 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16) | (parseInt(dots[2], 10) << 8) | parseInt(dots[3], 10);
  } else if (dots.length === 3) {
    ip1 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16) | (parseInt(dots[2], 10) << 8);
    ip2 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16) | (parseInt(dots[2], 10) << 8) | 255;
  } else if (dots.length === 2) {
    ip1 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16);
    ip2 = (parseInt(dots[0], 10) << 24) | (parseInt(dots[1], 10) << 16) | (255 << 8) | 255;
  } else if (dots.length === 1 && dots[0].length > 0) {
    ip1 = (parseInt(dots[0], 10) << 24);
    ip2 = (parseInt(dots[0], 10) << 24) | (255 << 16) | (255 << 8) | 255;
  }

  // Can't shift by 32 bits in javascript, who knew!
  if (slash[1] && slash[1] !== '32') {
     var s = parseInt(slash[1], 10);
     ip1 = ip1 & (0xffffffff << (32 - s));
     ip2 = ip2 | (0xffffffff >>> s);
  }

  var t1 = {and: []};
  var t2 = {and: []};
  var xff;

  if (ip1 !== -1) {
    if (ip1 === ip2) {
        t1.and.push({term: {a1: ip1>>>0}});
        t2.and.push({term: {a2: ip1>>>0}});
        xff = {term: {xff: ip1>>>0}};
    } else {
        t1.and.push({range: {a1: {from: ip1>>>0, to: ip2>>>0}}});
        t2.and.push({range: {a2: {from: ip1>>>0, to: ip2>>>0}}});
        xff =  {range: {xff: {from: ip1>>>0, to: ip2>>>0}}};
    }
  }

  if (port !== -1) {
    t1.and.push({term: {p1: port}});
    t2.and.push({term: {p2: port}});
  }

  if (t1.and.length === 1) {
      t1 = t1.and[0];
      t2 = t2.and[0];
  }

  switch(which) {
  case 0:
    if (xff)
        return {or: [t1, t2, xff]};
    else
        return {or: [t1, t2]};
  case 1:
    return t1;
  case 2:
    return t2;
  case 3:
    if (!xff)
        throw "xff doesn't support port only";
    return xff;
  }
}

function stripQuotes (str) {
  if (str[0] === "\"") {
    str =  str.substring(1, str.length-1);
  }
  return str;
}
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {"flex":true};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 15
break;
case 2:return 14
break;
case 3:return 18
break;
case 4:return 17
break;
case 5:return 19
break;
case 6:return 20
break;
case 7:return 21
break;
case 8:return 22
break;
case 9:return 56
break;
case 10:return 36
break;
case 11:return 45
break;
case 12:return 46
break;
case 13:return 47
break;
case 14:return 59
break;
case 15:return 49
break;
case 16:return 50
break;
case 17:return 51
break;
case 18:return 61
break;
case 19:return "ip.src"
break;
case 20:return "ip.dst"
break;
case 21:return "ip.xff"
break;
case 22:return "ip.xff.cnt"
break;
case 23:return "ip"
break;
case 24:return "cert.issuer.cn"
break;
case 25:return "cert.issuer.on"
break;
case 26:return "cert.subject.cn"
break;
case 27:return "cert.subject.on"
break;
case 28:return "cert.alt"
break;
case 29:return "cert.alt.cnt"
break;
case 30:return "cert.serial"
break;
case 31:return "cert.cnt"
break;
case 32:return "uri"
break;
case 33:return "uri.cnt"
break;
case 34:return "ua"
break;
case 35:return "ua.cnt"
break;
case 36:return "user"
break;
case 37:return "user.cnt"
break;
case 38:return "icmp"
break;
case 39:return "tcp"
break;
case 40:return "udp"
break;
case 41:return "host"
break;
case 42:return "host.cnt"
break;
case 43:return "oldheader"
break;
case 44:return "header"
break;
case 45:return "header.src"
break;
case 46:return "header.src.cnt"
break;
case 47:return "header.dst"
break;
case 48:return "header.dst.cnt"
break;
case 49:return 78
break;
case 50:return 31
break;
case 51:return "ssh.key"
break;
case 52:return "ssh.key.cnt"
break;
case 53:return "ssh.ver"
break;
case 54:return "ssh.ver.cnt"
break;
case 55:return 55
break;
case 56:return 70
break;
case 57:return 8
break;
case 58:return 7
break;
case 59:return 11
break;
case 60:return 10
break;
case 61:return 84
break;
case 62:return 83
break;
case 63:return 83
break;
case 64:return 85
break;
case 65:return 85
break;
case 66:return 82
break;
case 67:return 82
break;
case 68:return 88
break;
case 69:return 89
break;
case 70:return 86
break;
case 71:return 5
break;
case 72:return 'INVALID'
break;
case 73:console.log(yy_.yytext);
break;
}
};
lexer.rules = [/^(?:\s+)/,/^(?:[0-9]+\b)/,/^(?:([0-9]{1,3})?(\.[0-9]{1,3})?(\.[0-9]{1,3})?(\.[0-9]{1,3})?(\/[0-9]{1,2})?(:[0-9]{1,5})?\b)/,/^(?:bytes)/,/^(?:databytes)/,/^(?:packets)/,/^(?:protocol)/,/^(?:port\.src)/,/^(?:port\.dst)/,/^(?:port)/,/^(?:node)/,/^(?:country\.src)/,/^(?:country\.dst)/,/^(?:country\.xff)/,/^(?:country)/,/^(?:asn\.src)/,/^(?:asn\.dst)/,/^(?:asn\.xff)/,/^(?:asn)/,/^(?:ip\.src)/,/^(?:ip\.dst)/,/^(?:ip\.xff)/,/^(?:ip\.xff\.cnt)/,/^(?:ip)/,/^(?:cert\.issuer\.cn)/,/^(?:cert\.issuer\.on)/,/^(?:cert\.subject\.cn)/,/^(?:cert\.subject\.on)/,/^(?:cert\.alt)/,/^(?:cert\.alt\.cnt)/,/^(?:cert\.serial)/,/^(?:cert\.cnt)/,/^(?:uri)/,/^(?:uri\.cnt)/,/^(?:ua)/,/^(?:ua\.cnt)/,/^(?:user)/,/^(?:user\.cnt)/,/^(?:icmp)/,/^(?:tcp)/,/^(?:udp)/,/^(?:host)/,/^(?:host\.cnt)/,/^(?:oldheader)/,/^(?:header)/,/^(?:header\.src)/,/^(?:header\.src\.cnt)/,/^(?:header\.dst)/,/^(?:header\.dst\.cnt)/,/^(?:tags)/,/^(?:tags\.cnt)/,/^(?:ssh\.key)/,/^(?:ssh\.key\.cnt)/,/^(?:ssh\.ver)/,/^(?:ssh\.ver\.cnt)/,/^(?:[/\w*._:-]+)/,/^(?:"[^"]+")/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:!=)/,/^(?:==)/,/^(?:=)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:&&)/,/^(?:&)/,/^(?:\()/,/^(?:\))/,/^(?:!)/,/^(?:$)/,/^(?:.)/,/^(?:.)/];
lexer.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = molochparser;
exports.Parser = molochparser.Parser;
exports.parse = function () { return molochparser.parse.apply(molochparser, arguments); }
exports.main = function commonjsMain(args) {
    if (!args[1])
        throw new Error('Usage: '+args[0]+' FILE');
    var source, cwd;
    if (typeof process !== 'undefined') {
        source = require('fs').readFileSync(require('path').resolve(args[1]), "utf8");
    } else {
        source = require("file").path(require("file").cwd()).join(args[1]).read({charset: "utf-8"});
    }
    return exports.parser.parse(source);
}
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(typeof process !== 'undefined' ? process.argv.slice(1) : require("system").args);
}
}