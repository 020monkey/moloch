script(type='text/javascript', src='d3.v2.js')
script(type='text/javascript', src='cubism.v1.js')
script(type='text/javascript', src='highlight.min.js')

div#statsGraph
table#stats(cellpadding="0",cellspacing="0",border="0",class="display",style="table { clear: both }")
  thead
    tr
      th
      th Node
      th Time
      th Packets Captured
      th Kilobytes Saved
      th Sessions Saved
      th Active Sessions
      th Free Space MB
      th Packets/Sec
      th Bytes/Sec
      th Sessions/Sec
      th Dropped/Sec
  tbody
  tfoot
    tr
      th
      th Total
      th
      th
      th
      th
      th
      th
      th
      th
      th
      th
br
#stats

script(type='text/javascript')
  var context = cubism.context()
      .serverDelay(0)
      .clientDelay(0)
      .step(5e3)
      .size(1440);

  function metric(name) {
    return context.metric(function(startV, stopV, stepV, callback) {
      $.ajax( {
        "dataType": 'json', 
        "type": "GET", 
        "url": "/dstats.json?nodeName=" + name + 
                      "&start=" + startV/1000 + 
                      "&stop=" + stopV/1000 + 
                      "&step=" + stepV/1000 + 
                      "&interval=5" + 
                      "&name=deltaPackets",
        "success": function(data) {
          callback(null, data);
        }
      });
    }, name);
  }

  d3.select("#statsGraph").call(function(div) {
    var nodes = !{JSON.stringify(nodes)};
    var metrics = [];
    for (var i = 0; i < nodes.length; i++)
      metrics.push(metric(nodes[i]));

    div.append("div")
        .attr("class", "axis")
        .call(context.axis().orient("top"));

    div.selectAll(".horizon")
        .data(metrics)
      .enter().append("div")
        .attr("class", "horizon")
        .call(context.horizon());

    div.append("div")
        .attr("class", "rule")
        .call(context.rule());

  });

  context.on("focus", function(i) {
      d3.selectAll(".value").style("right", i == null ? null : context.size() - i + "px");
  });

  
  $(document).ready(function() {
    statsTable = $('#stats').dataTable( {
      "oLanguage": {
        "sProcessing": "<span class='blink'>I'm Hootin' :D</span>",
        "sLengthMenu": "_MENU_",
        "sInfo" : "Showing _START_ - _END_ of _TOTAL_",
        "sInfoFiltered" : "(_MAX_ total)"
      },
      "sDom": '<"H"lipr>t<"F"ip>',
      "iDisplayLength": 500,
      "aLengthMenu": [100, 500, 1000, 5000],
      "bRetrieve": true,
      "bFilter": false,
      "bScrollCollapse": true,
      "bAutoWidth": false,
      "aoColumns": [
        {
          "mDataProp" : "detail",
          "sWidth": "30",
          "bSortable": false,
          "sClass": "right"
        },
        { "mDataProp" : "id",
          "sClass": "right",
          "sType": "string"
        },
        { "mDataProp" : "currentTime",
          "fnRender" : function(oObj) {
            return dateString(oObj.aData.currentTime, " ");
          },
          "sClass": "right"
        },
        { "mDataProp" : "totalPackets",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
        { "mDataProp" : "totalK",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
        { "mDataProp" : "totalSessions",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
        { "mDataProp" : "monitoring",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
        { "mDataProp" : "freeSpaceM",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
        { "mDataProp" : "deltaPacketsPerSec",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
        { "mDataProp" : "deltaBytesPerSec",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
        { "mDataProp" : "deltaSessionsPerSec",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
        { "mDataProp" : "deltaDroppedPerSec",
          "fnRender" : function(oObj) {
            return numberWithCommas(oObj.aData[oObj.mDataProp]);
          },
          "sClass": "right",
          "sType": "formatted-num"
        },
      ],
      "aaSorting": [[1, "asc"]],
      "fnFooterCallback": function ( nRow, aaData, iStart, iEnd, aiDisplay ) {
        var totals = {totalPackets: 0, totalK: 0, totalSessions:0, deltaPacketsPerSec:0, deltaBytesPerSec:0 , deltaSessionsPerSec: 0, deltaDroppedPerSec: 0, monitoring: 0};
        for (var r = 0; r < aaData.length; r++) {
            totals.totalPackets += parseInt(aaData[r].totalPackets.replace(/\,/g,''));
            totals.totalK += parseInt(aaData[r].totalK.replace(/\,/g,''));
            totals.totalSessions += parseInt(aaData[r].totalSessions.replace(/\,/g,''));

            totals.deltaDroppedPerSec += parseInt(aaData[r].deltaDroppedPerSec.replace(/\,/g,''));
            totals.deltaSessionsPerSec += parseInt(aaData[r].deltaSessionsPerSec.replace(/\,/g,''));
            totals.deltaPacketsPerSec += parseInt(aaData[r].deltaPacketsPerSec.replace(/\,/g,''));
            totals.deltaBytesPerSec += parseInt(aaData[r].deltaBytesPerSec.replace(/\,/g,''));
            totals.monitoring += parseInt(aaData[r].monitoring.replace(/\,/g,''));
        }

        var nCells = nRow.getElementsByTagName('th');
        nCells[3].innerHTML = numberWithCommas(totals.totalPackets);
        nCells[4].innerHTML = numberWithCommas(totals.totalK);
        nCells[5].innerHTML = numberWithCommas(totals.totalSessions);
        nCells[6].innerHTML = numberWithCommas(totals.monitoring);
        nCells[8].innerHTML = numberWithCommas(totals.deltaPacketsPerSec);
        nCells[9].innerHTML = numberWithCommas(totals.deltaBytesPerSec);
        nCells[10].innerHTML = numberWithCommas(totals.deltaSessionsPerSec);
        nCells[11].innerHTML = numberWithCommas(totals.deltaDroppedPerSec);
      }
    } );

    $('#stats tbody td img').live('click', function () {
      var nTr = this.parentNode.parentNode;
      var aData = statsTable.fnGetData( nTr );
      if ( this.src.match('details_close') )
      {
        this.src = "/DataTables-1.9.1/examples/examples_support/details_open.png";
        statsTable.fnClose( nTr );
      }
      else
      {
        this.src = "/DataTables-1.9.1/examples/examples_support/details_close.png";
        $.ajax( {
          "dataType": 'html', 
          "type": "GET", 
          "url": '/' + aData.id + '/statsDetail',
          "success": function(data) {
            statsTable.fnOpen( nTr, data, 'details' );
          }
        } );

      }
    } );

    function reloadData() {
      $.ajax( {
        "dataType": 'json', 
        "type": "GET", 
        "url": '/stats.json',
        "success": function(data) {
          var nNodes = statsTable.fnGetNodes();
          for (var i = 0; i < data.aaData.length; i++) {
            var found = false;
            for (var n = 0 ; n < nNodes.length; n++) {
              var id = statsTable.fnGetData(n, 1);
              if (id === data.aaData[i].id) {
                found = true;
                if (statsTable.fnIsOpen(nNodes[n]))
                  data.aaData[i].detail = '<img src="/DataTables-1.9.1/examples/examples_support/details_close.png" height="20px">';
                else
                  data.aaData[i].detail = '<img src="/DataTables-1.9.1/examples/examples_support/details_open.png" height="20px">';
                statsTable.fnUpdate(data.aaData[i], n, 0, false, false);
                break;
              }
            }
            if (!found) {
              data.aaData[i].detail = '<img src="/DataTables-1.9.1/examples/examples_support/details_open.png" height="20px">';
              statsTable.fnAddData(data.aaData[i], false);
            }
          }
          statsTable.fnDraw();
        }
      } );
    }

    setInterval(reloadData, 5000);
    reloadData();
  } );
