- var range = "<, <=, ==, >=, >, !=";
div(style="margin:10px")
  p
    img(src="moloch_77.png", style="float: left;margin:4px;")
    | Moloch is a open source large scale IPv4 PCAP capturing, indexing and database system.  A simple web interface is provided for PCAP browsing, searching, and exporting.  APIs are exposed that allow PCAP data and JSON formatted session data to be downloaded directly. Simple security is implemented by using https and HTTP digest password support.  Moloch is not meant to replace IDS engines but instead work along side them to store and index all the network traffic in standard PCAP format, providing fast access.  Moloch is built to be deployed across many machines and can scale to handle multiple megabits/sec of traffic.
  p Moloch uses a very simple query language for building expresions.  It supports grouping using parenthesis and logical AND and OR using && and || respectively.  Most fields can be accessed directly using the field names and operators described in the table below.
  table(border=1)
    tr
      th Name
      th Operators
      th Data type
      th What?
    tr
      td asn
      td.
        ==, !=
      td Autonomous System Number String
      td Maxmind GeoIP string of asn.src, asn.dst, or asn.xff<br>Examples:asn == as12345, asn == AOL
    tr
      td asn.src
      td.
        ==, !=
      td Autonomous System Number String
      td Maxmind GeoIP ASNum string of source ip address<br>Examples:asn.src == as12345, asn.src == AOL
    tr
      td asn.dst
      td.
        ==, !=
      td Autonomous System Number String
      td Maxmind GeoIP ASNum string of destination ip address<br>Examples:asn.dst == as12345, asn.dst == AOL
    tr
      td asn.xff
      td.
        ==, !=
      td Autonomous System Number String
      td Maxmind GeoIP ASNum string of XFF ip addresses<br>Examples:asn.xff == as12345, asn.xff == AOL
    tr
      td bytes
      td #{range}
      td integer
      td Number of raw bytes in session<br>Example:bytes &gt; 1000 && bytes &lt; 2000
    tr
      td country
      td.
        ==, !=
      td 3 character country string
      td Maxmind GeoIP string of country.src, country.dst, or country.xff<br>Examples:country == USA, country == *SA
    tr
      td country.src
      td.
        ==, !=
      td 3 character country string
      td Maxmind GeoIP string of source ip country<br>Examples:country == USA, country != *SA
    tr
      td country.dst
      td.
        ==, !=
      td 3 character country string
      td Maxmind GeoIP string of destination ip country<br>Examples:country == USA, country != *SA
    tr
      td country.xff
      td.
        ==, !=
      td 3 character country string
      td Maxmind GeoIP string of XFF ip country<br>Examples:country == USA, country != *SA
    tr
      td databytes
      td #{range}
      td integer
      td Number of databytes in session<br>databytes &gt;= 2000
    tr
      td header
      td.
        ==, !=
      td string or quoted string
      td Matches against the lowercased http request and response headers for the session<br>Examples: header == *length, header != content-length
    tr
      td host
      td.
        ==, !=
      td string
      td host from HTTP request Host header or DNS query<br>Example:host == *net
    tr
      td ip
      td.
        ==, !=
      td a[.b[.c[.d]]][/n][:port]
      td Matches ip addresses and optionally port using short hand and/or /n notation for address1 or address2.<br>Examples: ip==10.10.10.10, ip!=10.10.10.0/24:80, ip==10.10.10:80
    tr
      td ip.src
      td.
        ==, !=
      td a[.b[.c[.d]]][/n][:port]
      td Matches ip addresses and optionally port using short hand and/or /n notation for address1.<br>Examples: ip.src==10.10.10.10, ip.src!=10.10.10.0/24:80, ip.src==10.10.10:80
    tr
      td ip.dst
      td.
        ==, !=
      td a[.b[.c[.d]]][/n][:port]
      td Matches ip addresses and optionally port using short hand and/or /n notation for address2.<br>Examples: ip.dst==10.10.10.10, ip.dst==10.10.10.0/24:80, ip.dst==10.10.10:80
    tr
      td ip.xff
      td.
        ==, !=
      td a[.b[.c[.d]]][/n][:port]
      td Matches ip addresses and optionally port using short hand and/or /n notation for address2.<br>Examples: ip.xff==10.10.10.10, ip.xff==10.10.10.0/24:80, ip.xff==10.10.10:80
    tr
      td node
      td.
        ==, !=
      td string
      td Moloch node the session was captured on.<br>Examples:node == node1, node != *1
    tr
      td packets
      td #{range}
      td integer
      td Number of packets in the session.<br>Example: packets &lt; 10
    tr
      td port
      td #{range}
      td integer
      td Source port or destination port of the sessions.<br>Example:port == 80
    tr
      td port.src
      td #{range}
      td integer
      td Source port of the sessions.<br>Example:port.src == 80
    tr
      td port.dst
      td #{range}
      td integer
      td Destination port of the sessions.<br>Example:port.dst == 80
    tr
      td protocol
      td #{range}
      td integer | == tcp | == udp
      td IP packet protocol
    tr
      td tags
      td.
        ==, !=
      td string or quoted string
      td Matches against the tags for the session<br>Examples: tags != *gzip, tags == http:method:CONNECT
    tr
      td ua
      td.
        ==, !=
      td string or quoted string
      td Matches against the User Agent for the http request<br>ua == Java
    tr
      td uri
      td.
        ==, !=
      td string or quoted string
      td Matches against the URIs for the session<br>Example:uri == facebook.com

  h2 Examples
  p 1) Find all the sessions involving RUS or CHN and on port 80 and the hostname contains com
  code (country == rus || country == chn) && port == 80 && host == *com
  p 2) Context type of text/plain, involving Canda, and less then 20 packets
  code tags == "http:content:text/plain" && country == CAN && packets < 20
