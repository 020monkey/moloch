extends layout

block content
  //-
  mixin spi(name, field, expr, c)
    dt.context-menu-one #{name}
      input(id="SPIck-#{field}", type="checkbox", class="#{c}-group")
    dd(id="SPIda-#{field}", molochexpr=expr)

  mixin spion(name, field, expr, c)
    dt.context-menu-one #{name}
      input.spion(id="SPIck-#{field}", type="checkbox", class="#{c}-group")
    dd(id="SPIda-#{field}", molochexpr=expr)

  mixin title(name, c)
    h1 #{name}
      input(id="SPItck-#{c}-group", type="checkbox")

  script(src='jquery-jvectormap-1.2.2.min.js')
  script(src='jquery-jvectormap-world-en.js')
  script(src='jquery.autocomplete.js')
  script(src='jQuery-contextMenu/src/jquery.ui.position.js')
  script(src='jQuery-contextMenu/src/jquery.contextMenu.js')
  link(rel='stylesheet', type='text/css', href='jQuery-contextMenu/src/jquery.contextMenu.css')

  div(style="margin-bottom: 12px")
  div#bsqErr
  div#sessionsInfo.sessionsInfo
    div#world-map-wrapper.world-map-wrapper
      div#world-map.world-map
    div#sessionGraph.sessionGraph
    select#sessionGraphSelect
      option(value="lpHisto") sessions
      option(value="paHisto") packets
      option(value="dbHisto") databytes
  div#spiViewInfo
    span#recordsText
  div#spiview
    +title("General", "general")
    dl
      +spion("IP Protocol", "pr", "protocol", "general")
      +spion("Src IP", "a1", "ip.src", "general")
      +spion("Src Port", "p1", "port.src", "general")
      +spion("Src GEO", "g1", "country.src", "general")
      +spion("Src ASN", "rawas1", "asn.src", "general")
      +spi("Src ASN Token", "as1", "asn.src", "general")
      +spi("Src RIR", "rir1", "rir.src", "general")
      +spi("Src Payload8", "fb1", "payload8.src", "general")

      +spion("Dst IP", "a2", "ip.dst", "general")
      +spion("Dst Port", "p2", "port.dst", "general")
      +spion("Dst GEO", "g2", "country.dst", "general")
      +spion("Dst ASN", "rawas2", "asn.dst", "general")
      +spi("Dst ASN Token", "as2", "asn.dst", "general")
      +spi("Dst RIR", "rir2", "rir.dst", "general")
      +spi("Dst Payload8", "fb2", "payload8.dst", "general")

      +spi("Node", "no", "node", "general")
      +spi("Tag", "ta", "tags", "general")
      +spi("User", "user", "user", "general")

    +title("HTTP", "http")
    dl
      +spi("Host", "ho", "host.http", "http")
      +spi("URI", "rawus", "http.uri", "http")
      +spi("URI Token", "us", "http.uri", "http")
      +spi("URI Path", "hpath", "http.uri.path", "http")
      +spi("URI QS Key", "hkey", "http.uri.key", "http")
      +spi("URI QS Value", "hval", "http.uri.value", "http")
      +spi("User Agent", "rawua", "http.user-agent", "http")
      +spi("User Agent Token", "ua", "http.user-agent", "http")

      +spi("XFF IP", "xff", "ip.xff", "http")
      +spi("XFF GEO", "gxff", "country.xff", "http")
      +spi("XFF ASN", "rawasxff", "asn.xff", "http")
      +spi("XFF ASN Token", "asxff", "asn.xff", "http")
      +spi("XFF RIR", "rirxff", "rir.xff", "http")

      +spi("Request Header", "hh1", "http.hasheader.src", "http")
      +spi("Request Version", "hsver", "http.version.src", "http")
      each value,i in reqFields
        if (value.type === "string")
          +spi(value.name + " Header", "hdrs.hreq-" + value.name + ".raw", "http." + value.name, "http")
          +spi(value.name + " Tokens", "hdrs.hreq-" + value.name + ".snow", "http." + value.name, "http")
        else
          +spi(value.name + " Header", "hdrs.hreq-" + value.name, "http." + value.name, "http")
      +spi("Resp Header", "hh2", "http.hasheader.dst", "http")
      +spi("Resp Version", "hdver", "http.version.dst", "http")
      each value,i in resFields
        if (value.type === "string")
          +spi(value.name + " Header", "hdrs.hres-" + value.name + ".raw", "http." + value.name, "http")
          +spi(value.name + " Tokens", "hdrs.hres-" + value.name + ".snow", "http." + value.name, "http")
        else
          +spi(value.name + " Header", "hdrs.hres-" + value.name, "http." + value.name, "http")

      +spi("Body MD5", "hmd5", "http.md5", "http")

    +title("DNS", "dns")
    dl
      +spi("Host", "dnsho", "host.dns", "dns")
      +spi("IP", "dnsip", "ip.dns", "dns")
      +spi("GEO", "gdnsip", "country.dns", "dns")
      +spi("ASN", "rawasdnsip", "asn.dns", "dns")
      +spi("ASN Token", "asdnsip", "asn.dns", "dns")
      +spi("RIR", "rirdnsip", "rir.dns", "dns")

    +title("IRC", "irc")
    dl
      +spi("Nick", "ircnck", "irc.nick", "irc")
      +spi("Channel", "ircch", "irc.channel", "irc")

    +title("Certificates", "cert")
    dl
      +spi("Issuer CN", "iCn", "cert.issuer.cn", "cert")
      +spi("Issuer ON", "rawiOn", "cert.issuer.on", "cert")
      +spi("Issuer ON Token", "iOn", "cert.issuer.on", "cert")

      +spi("Subject CN", "sCn", "cert.subject.cn", "cert")
      +spi("Subject ON", "rawsOn", "cert.subject.on", "cert")
      +spi("Subject ON Token", "sOn", "cert.subject.on", "cert")

      +spi("Serial Number", "sn", "cert.serial", "cert")
      +spi("Alt Name", "alt", "cert.alt", "cert")


    +title("SSH", "ssh")
    dl
      +spi("Version", "sshver", "ssh.ver", "ssh")
      +spi("Key", "sshkey", "ssh.key", "ssh")

    +title("SOCKS", "socks")
    dl
      +spi("Host", "socksho", "host.socks", "socks")
      +spi("IP", "socksip", "ip.socks", "socks")
      +spi("GEO", "gsocksip", "country.socks", "socks")
      +spi("ASN", "rawassocksip", "asn.socks", "socks")
      +spi("ASN Token", "assocksip", "asn.socks", "socks")
      +spi("RIR", "rirsocksip", "rir.socks", "socks")
      +spi("Port", "sockspo", "port.socks", "socks")
      +spi("User", "socksuser", "socks.user", "socks")

    if (user.emailSearch)
      +title("Email", "email")
      dl
        +spi("IP", "eip", "ip.email", "email")
        +spi("GEO", "geip", "country.email", "email")
        +spi("ASN", "rawaseip", "asn.email", "email")
        +spi("ASN Token", "aseip", "asn.email", "email")
        +spi("RIR", "rireip", "rir.email", "email")

        +spi("Subject", "rawesub", "email.subject", "email")
        +spi("Subject Token", "esub", "email.subject", "email")
        +spi("Source", "esrc", "email.src", "email")
        +spi("Destination", "edst", "email.dst", "email")
        +spi("X-Mailer", "raweua", "email.x-mailer", "email")
        +spi("X-Mailer Token", "eua", "email.x-mailer", "email")
        +spi("Message Id", "eid", "email.message-id", "email")
        +spi("Mime Version", "emv", "email.mime-version", "email")
        +spi("Filename", "efn", "email.fn", "email")
        +spi("Attachment MD5", "emd5", "email.md5", "email")
        each value,i in emailFields
          if (value.type === "string")
            +spi(value.name + " Header", "hdrs.ehead-" + value.name + ".raw", "email." + value.name, "email")
            +spi(value.name + " Tokens", "hdrs.ehead-" + value.name + ".snow", "email." + value.name, "email")
          else
            +spi(value.name + " Header", "hdrs.ehead-" + value.name, "email." + value.name, "email")

    +title("SMB", "smb")
    dl
      +spi("Users", "smbuser", "smb.user", "smb")
      +spi("Hosts", "smbho", "smb.host", "smb")
      +spi("Domain", "smbdm", "smb.domain", "smb")
      +spi("Share", "smbsh", "smb.share", "smb")
      +spi("Filename", "smbfn", "smb.fn", "smb")
      +spi("OS", "smbos", "smb.os", "smb")
      +spi("Version", "smbver", "smb.ver", "smb")

    if (pluginFields && pluginFields.length > 0)
      +title("Plugin", "plugin")
      dl
        each value,i in pluginFields
          if (value.type === "string")
            +spi(value.name, "plugin." + value.name + ".raw", "plugin." + value.name, "plugin")
            +spi(value.name + " Tokens", "plugin." + value.name + ".snow", "plugin." + value.name, "plugin")
          else if (value.type === "ip")
            +spi(value.name, "plugin." + value.name, "plugin." + value.name, "plugin")
            +spi(value.name + " GEO", "plugin." + value.name + ".geo.raw",  "plugin." + value.name + ".country", "plugin")
            +spi(value.name + " ASN", "plugin." + value.name + ".asn.snow", "plugin." + value.name + ".asn", "plugin")
            +spi(value.name + " RIR", "plugin." + value.name + ".rir.raw",  "plugin." + value.name + ".rir", "plugin")
          else
            +spi(value.name, "plugin." + value.name, "plugin." + value.name, "plugin")

  script(type='text/javascript').
    var initialDisplayLength = 100;
    var doPushState = 1;
    var fetchSize = {};
    var spiTerms = {};

    $(".spion").prop("indeterminate", true);

    $(window).bind('popstate', function(e) {
      if (window.history.ready) {
        doPushState = 0;
        handleUrlParams();
        loadData();
      }
    });

    function fetchData(theQueue, state) {
      var params = buildParams();
      state += "&" + $.param(params);
      var url = "spiview.json?" + state;
      if (doPushState && state !== window.location.search.substring(1) && 'pushState' in history) {
        var fullstate = "";
        $("[id^=SPIck]").each(function(index, item) {
          var field = item.id.substring(6);
          if (fetchSize[field]) {
            fullstate += "," + field + ":" + fetchSize[field];
          } else if ($(item).prop("indeterminate")) {
            fullstate += "," + field + ":10";
          } else if ($(item).prop("checked")) {
            fullstate += "," + field + ":100";
          }
        });
        fullstate += "&" + $.param(params);
        history.pushState({}, this.title || '', "spiview?spi=" + fullstate.substring(1));
      } else {
        doPushState = 1;
      }

      $.ajaxQueue(theQueue, {
         "dataType": 'json',
          "type": "GET",
          "url": url,
          "success": function (json) {
            updateHealth(json.health);

            if (json.lpHisto && json.lpHisto[0]) {
              if ($("#startDate").val() === "") {
                $("#startDate").val(dateString(json.lpHisto[0][0]/1000, ' '));
              }
              if ($("#stopDate").val() === "") {
                $("#stopDate").val(dateString(json.lpHisto[json.lpHisto.length-1][0]/1000) + 59, ' ');
              }
            }

            updateGraph(json.graph);
            updateMap(json.map);

            if (json.bsqErr) {
              $("#bsqErr").show();
              $("#bsqErr").html("<pre>" + json.bsqErr.replace(/\n/g, "\n").replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') + "</pre>");
            } else {
              $("#bsqErr").hide();
            }

            $("#actionsForm").data("moloch-visible", -1)
                             .data("moloch-all", json.iTotalDisplayRecords);
            $("#recordsText").text("Showing " + numberWithCommas(json.iTotalDisplayRecords) + " entries filtered from " + numberWithCommas(json.iTotalRecords) + " total entries");

            $.each(json.spi, function(spii, spi) {
              var spida = $("[id='SPIda-" + spii + "']");
              if (spi.terms.length !== 0) {
                spida.text("");
              } else {
                spida.html("&nbsp;");
              }

              var spiterm = "";
              if (spii.match(/^(a1|a2|xff|dnsip|eip|socksip)$/) !== null ||
                  (molochFields[spii] && molochFields[spii].type === "ip")) {
                $.each(spi.terms, function(i, term) {
                  if (i !== 0) {
                    spida.append(", ");
                    spiterm += ",";
                  }
                  spiterm += ipString(term.term);
                  spida.append($('<a></a>').attr("href","#")
                                           .text(ipString(term.term))
                                           .click(function() {
                                             addExpression(spida.attr("molochexpr") + "==" + ipString(term.term));
                                             return false;
                                           }));
                  spida.append("<span class=\"spicount\">(" + term.count + ")</span>");
                });
              } else {
                $.each(spi.terms, function(i, term) {
                  if (i !== 0) {
                    spida.append(", ");
                    spiterm += ",";
                  }
                  var quoted = term.term;
                  if (typeof term.term == "string" && term.term.match(/[^\w]/)) {
                    quoted = '"' + quoted + '"';
                  }
                  spiterm += quoted;
                  spida.append($('<a></a>').attr("href","#")
                                           .text(""+term.term)
                                           .click(function() {
                                             addExpression(spida.attr("molochexpr") + "==" + quoted);
                                             return false;
                                           }));
                  spida.append("<span class=\"spicount\">(" + term.count + ")</span>");
                });
              }
              spiTerms[spii] = spiterm;

              if (spi.other > 0) {
                  spida.append(", <a href=\"#\" onclick='return moreSPI(\"" +
                               spii +
                               "\");'</a> &hellip;</a>");
                  spida.append("<span class=\"spicount\">(" + spi.other + ")</span>");
              }
            });
          }
      });
    }

    function fetchState(item, append) {
      var field = item.attr('id').substring(6);
      var state = "";

      var spida = $("[id='SPIda-" + field + "']");
      if (item.prop("indeterminate")) {
        state = field + ":10";
        if (append) {
          spida.append(" <img src=\"spinning.gif\">");
        } else {
          spida.html("<img src=\"spinning.gif\">");
        }
      } else if (item.prop("checked")) {
        if (!fetchSize[field]) {
          fetchSize[field] = 100;
        }
        state = field + ":" + fetchSize[field];
        if (append) {
          spida.append(" <img src=\"spinning.gif\">");
        } else {
          spida.html("<img src=\"spinning.gif\">");
        }
      } else {
        delete fetchSize[field];
        spida.html("&nbsp;");
      }
      return state;
    }
    var loadQueue = $({});
    var clickQueue = $({});

    function loadData() {
      loadQueue.clearQueue();
      clickQueue.clearQueue();

      var state = "facets=1&spi=";
      var num = 0;
      $("[id^=SPIck]").each(function(index, item) {
        var istate = fetchState($(item), false);

        if (istate !== "") {
          if (num > 0) {
            state += ",";
          }
          num++;
          state += istate;
          if (num === 3) {
            fetchData(loadQueue, state);
            num = 0;
            state = "spi=";
          }
        }
      });

      if (num > 0) {
        fetchData(loadQueue, state);
      }
    }

    function moreSPI(spii) {
      var spick = $("[id='SPIck-" + spii + "']");
      if (spick.prop("indeterminate")) {
        spick.prop("indeterminate", null);
        spick.prop("checked", "checked");
      }
      if (fetchSize[spii]) {
        fetchSize[spii] += 100;
      }
      var state = fetchState(spick, true);
      fetchData(clickQueue, "spi=" + state);
      return false;
    }

    $('#searchForm').submit(function() {
      loadData();
      return false;
    });

    $(window).resize(function(e) {
      expressionResize();
    });

    $(":checkbox").on('change', function(e) {
      if (e.target.id.match(/SPItck/)) {
        var item = $(e.target);
        if (item.prop("checked")) {
          $("." + e.target.id.substring(7)).each(function() {
            $(this).prop("indeterminate", null);
            $(this).prop("checked", "checked").triggerHandler('change');
          });
        } else {
          $("." + e.target.id.substring(7)).each(function() {
            $(this).prop("indeterminate", null);
            $(this).prop("checked", false).triggerHandler('change');
          });
        }
        return true;
      }
      var state = fetchState($(e.target), true);
      if (state !== "") {
        fetchData(clickQueue, "spi=" + state);
      }
      return false;
    });

    $(document).ready(function() {
      var initialParams = handleUrlParams();
      if (initialParams.spi) {
        initialParams.spi.split(",").forEach(function (item) {
          var parts = item.split(":");
          var spick = $("[id='SPIck-" + parts[0] + "']");
          if (parts[1] === "10") {
            spick.prop("indeterminate");
          } else {
            fetchSize[parts[0]] = +parts[1];
            spick.prop("indeterminate", null);
            spick.prop("checked", "checked");
          }
        });
      }

      loadData();

      setupGraph();
      expressionResize();
      setupMap();

      $.contextMenu({
          selector: '.context-menu-one',
          build: function($trigger, e) {
            var checkbox = $(e.target).find("input");
            items = {
              spigraph: {name: "Open SPI Graph " + $(e.target).text(), mtype:0, field: checkbox.attr("id").substring(6)},
              items: {name: "Export Unique " + $(e.target).text(), mtype:1, counts:0, field: checkbox.attr("id").substring(6)},
              itemcounts: {name: "Export Unique " + $(e.target).text() + " with Counts", mtype:1, counts:1, field: checkbox.attr("id").substring(6)},
              pivot: {name: "Pivot on " + $(e.target).text(), mtype:2, counts:0, field: checkbox.attr("id").substring(6)}
            };
            return {
              callback: function(key, options) {
                var params = buildParams();
                var url;

                if (items[key].mtype === 2) {
                  var spida = $("[id='SPIda-" + items[key].field + "']");
                  var str = spida.attr("molochexpr") + " == [" + spiTerms[items[key].field] + "]";

                  $("#expression").val(str);
                  return true;
                } else if (items[key].mtype === 0) {
                  params.push({name:'field', value:items[key].field});
                  url = "spigraph?" + $.param(params);
                } else {
                  params.push({name:'field', value:items[key].field});
                  params.push({name:'counts', value:items[key].counts});
                  url = "unique.txt?" + $.param(params);
                }

                window.open(url);
              },
              items: items
            };
          }
      });

      var searchStuffOffset = $('#searchStuff').offset().top;
      $(window).scroll(function () {
        var scrollTop = $(window).scrollTop(); // check the visible top of the browser

        if (searchStuffOffset < scrollTop) {
          $('#searchStuff').addClass('fixedsearch');
          $('#logo').hide();
        } else {
          $('#searchStuff').removeClass('fixedsearch');
          $('#logo').show();
        }
      });
    });

