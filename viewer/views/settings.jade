extends layout

include mixins

block content
  if suser.userId != user.userId
    h1.red Administrator changing data for user '#{suser.userId}'
  h2 Settings
  form#changeSettings
    input(type='hidden', id='token', name='token', value='#{token}')
    h3 General
    label(for='timezone') Timezone format:
    select#timezone.setting(name="timezone")
      option(value="local") local time
      option(value="gmt") gmt time
    br
    h3 Sessions Tab
    label(for='detailFormat') Session Detail Format:
    select#detailFormat.setting(name="detailFormat")
      option(value="last") last used
      option(value="natural") natural
      option(value="ascii") ascii
      option(value="utf8") utf8
      option(value="hex") hex
    br
    label(for='showTimestamps') Show Timestamps:
    select#showTimestamps.setting(name="showTimestamps")
      option(value="last") last used
      option(value="true") on
      option(value="false") off
    br
    label(for='sortColumn') Sessions Sort Column:
    select#sortColumn.setting(name="sortColumn")
      option(value="start") Start Time
      option(value="stop") Stop Time
      option(value="srcip") Src IP
      option(value="srcport") Src Port
      option(value="dstip") Dst IP
      option(value="dstport") Dst Port
      option(value="packets") Packets
      option(value="bytes") Bytes
      option(value="node") Node
    select#sortDirection.setting(name="sortDirection")
      option(value="asc") Ascending
      option(value="desc") Descending
    h3 SPI Graph Tab
    label(for='spiGraph') Default Graph:
    mixin fieldsSelect("spiGraph", "setting", false)
    h3 Connections Tab
    label(for='connSrcField') Default Src Field:
    mixin fieldsSelect("connSrcField", "setting", true)
    br
    label(for='connDstField') Default Dst Field:
    mixin fieldsSelect("connDstField", "setting", true, [{db: "ip.dst:port", exp: "ip.dst:port"}])
  p
  hr
  h2 Views
  p Saved views provide an easier method to specify common base queries and can be activated in the navigation header.
  if (suser.views)
    h3 Current Views
    table#views(cellpadding="0",cellspacing="0",border="0",class="display",style="table { clear: both }")
      thead
        tr
          th(style="width:150px") Name
          th Expression
          th(style="width:50px") Action
      tbody
        - var keys = Object.keys(suser.views).sort()
        each key in keys
          tr
            td(contentEditable) #{key}
            td(contentEditable) #{suser.views[key].expression}
            td
              a.deleteViewAction(href="#") delete
    
  p
  h3 New View
  form#createViewForm
    input(type='hidden', id='token', name='token', value='#{token}')
    label(for='viewName') View Name:
    input(id='viewName', name='viewName', size='30', maxlength='20')
    br
    label(for='viewExpression') Expression:
    input(id='viewExpression', name='viewExpression', size='100')
    p
    center
      button#createView Create View
  hr
  h2 Change Password
  form#changePasswordForm
    input(type='hidden', id='token', name='token', value='#{token}')
    - if (currentPassword)
      label(for='currentPassword') Current Password:
      input(type='password', id='currentPassword', name='currentPassword', size='30')
      br 
    label(for='newPassword') New Password:
    input(type='password', id='newPassword', name='newPassword', size='30')
    br
    label(for='newPassword2') New Password:
    input(type='password', id='newPassword2', name='newPassword2', size='30')
    p 
    center
      button#change Change Password

  script(type='text/javascript').
    var settings  = !{JSON.stringify(suser.settings)};

    $(document).ready(function() {
      // Selects
      var defaults = {
        spiGraph: "no",
        connSrcField: "a1",
        connDstField: "ip.dst:port"
      };

      ["timezone", "detailFormat", "showTimestamps", "sortColumn", "sortDirection", "spiGraph", "connSrcField", "connDstField"].forEach(function(field) {
        if (settings[field]) {
          $("#" + field + " option[value='" + settings[field] + "']").attr('selected', 'selected');
        } else if (defaults[field]) {
          $("#" + field + " option[value='" + defaults[field] + "']").attr('selected', 'selected');
        }
      });
    });
    

    $('#changePasswordForm').submit(function() {
      if ($("#newPassword").val() != $("#newPassword2").val()) {
        alert("New passwords don't match");
        return false;
      }

      $.ajax( {
        "dataType": 'json',
        "type": "POST",
        "url": "#{basePath}changePassword",
        "data": $("#changePasswordForm").serialize(),
        "success": function(data) {
          if (!data.success) {
            alert(data.text);
          } else {
            alert("Password changed.");
          }
        }
      });
      return false;
    });

    $('.setting').live('change', function (e) {
      $.ajax( {
        "dataType": 'json',
        "type": "POST",
        "url": "#{basePath}changeSettings",
        "data": $("#changeSettings").serialize(),
        "success": function(data) {
          if (!data.success) {
            alert(data.text);
          }
        }
      });
    });

    $('#createViewForm').submit(function() {
      $.ajax( {
        "dataType": 'json',
        "type": "POST",
        "url": "#{basePath}updateView",
        "data": $("#createViewForm").serialize(),
        "success": function(data) {
          if (!data.success) {
            alert(data.text);
          } else {
            location.reload();
          }
        }
      });
      return false;
    });

    $('.deleteViewAction').live('click', function (e) {
      $.ajax( {
        "dataType": 'json',
        "type": "POST",
        "url": "#{basePath}deleteView",
        "data": [{name: "view", value: $(this.parentNode.parentNode).find("td:first").text()},
                 {name: "token", value: "#{token}"}],
        "success": function(data) {
          if (!data.success) {
            alert(data.text);
          } else {
            location.reload();
          }
        }
      });
    });

    $('td[contenteditable]').live('focusout', function () {
      var row = $(this.parentNode);
      $.ajax( {
        "dataType": 'json',
        "type": "POST",
        "url": "#{basePath}updateView",
        "data": [{name: "viewName", value: row.find("td:first").text()}, 
                 {name: "viewExpression", value: row.find("td:eq(1)").text()},
                 {name: "token", value: "#{token}"}], 
        "success": function(data) {
          if (!data.success) {
            alert(data.text);
          }
        }
      });
    });

    $('td[contenteditable]').live('keypress', function (e) {
      if ((e.keyCode ? e.keyCode : e.which) === 13) {
        e.target.blur();
        return false;
      }
    });
