script(src='jvectormap/jquery-jvectormap.js')
script(src='jquery-jvectormap-world-en.js')
script(src='jquery.autocomplete.js')
script(src='jQuery-contextMenu/src/jquery.ui.position.js')
script(src='jQuery-contextMenu/src/jquery.contextMenu.js')
link(rel='stylesheet', type='text/css', href='jQuery-contextMenu/src/jquery.contextMenu.css')

div.context-menu-one(style="margin-bottom: 4px")
div#bsqErr
div#sessionsInfo
  div#world-map-wrapper
    div#world-map
  div#sessionGraph
  select#sessionGraphSelect
    option(value="lpHisto") sessions
    option(value="paHisto") packets
    option(value="dbHisto") databytes
table#sessions.context-menu-one(cellpadding="0",cellspacing="0",border="0",class="display",style="table { clear: both }")
  thead
    tr
      th
      th Id
      th Start
      th Stop
      th#a1 Src IP
      th Src Port
      th#a2 Dst IP
      th Dst Port
      th Packets
      th Bytes
      th Node
      th#us Uris
  tbody
br
script(type='text/javascript')
  var startTime, stopTime;
  var sessionsTable;
  var lastResult;
  var initialDisplayLength;
  var doPushState = 1;


  $(window).bind('popstate', function(e) {
    if (window.history.ready) {
      doPushState = 0;
      handleUrlParams();

      sessionsTable.fnLengthChange(initialDisplayLength);
      sessionsTable.fnDraw();
    }
  });

  $("#export").click(function (e) {
    var data = sessionsTable.fnSettings().oApi._fnAjaxParameters(sessionsTable.fnSettings());

    var params = buildParams();
    params = $.merge(data, params);

    var url = "sessions.pcap?" + $.param(params);

    window.location = url;
    return false;
  });



  var isBlinking = 0;
  function startBlink(loop) {
    if (isBlinking && !loop) {
      return;
    }
    isBlinking = 1;
    $(".blink").animate({opacity:0},500,"linear",function() {
      $(this).animate({opacity:1},500, function() {
        if (isBlinking) {
          startBlink(1);
        }
      });
    });
  }
  function stopBlink() {
    isBlinking = 0;
  }

  $(document).ready(function() {
    handleUrlParams();

    $('#sessions tbody td img').live('click', function () {
      var nTr = this.parentNode.parentNode;
      if ( this.src.match('details_close') )
      {
        $(nTr).removeClass('opened');
        $(nTr).removeClass('fixedrow');
        /* This row is already open - close it */
        this.src = "DataTables-1.9.1/examples/examples_support/details_open.png";
        sessionsTable.fnClose( nTr );
      }
      else
      {
        $(nTr).addClass('opened');
        var aData = sessionsTable.fnGetData( nTr );
        this.src = "DataTables-1.9.1/examples/examples_support/details_close.png";
        $.ajax( {
            "dataType": 'html',
            "type": "GET",
            "url": '#{basePath}' + aData.no + '/' + aData.id + '/sessionDetail',
            "success": function(data) {
              sessionsTable.fnOpen( nTr, data, 'details' );
            }
        } );

      }
    } );

    $('#searchForm').submit(function() {
      sessionsTable.fnDraw();
      return false;
    });

    $('#date').change(function() {
      sessionsTable.fnDraw();
      return false;
    });

    $('#sessionGraphSelect').change(function() {
      drawGraph(lastResult[$('#sessionGraphSelect').val()]);
      return false;
    });

    sessionsTable = $('#sessions').dataTable( {
      "oLanguage": {
        "sProcessing": "<img src=\"watching.gif\"><div class='blink'>I'm Hootin' :D</div>",
        "sLengthMenu": "_MENU_"
      },
      "sDom": '<"fg-toolbar ui-widget-header ui-helper-clearfix"lipr>t',
      "iDisplayLength": initialDisplayLength,
      "aLengthMenu": [100, 500, 1000, 5000],
      "bProcessing": true,
      "bServerSide": true,
      "sAjaxSource": "#{basePath}sessions.json",
      "bRetrieve": true,
      "bFilter": false,
      "bScrollCollapse": true,
      "bAutoWidth": false,
      "sPaginationType": "full_numbers",
      "aoColumns": [
        {
          "mDataProp" : null,
          "sWidth": "10px",
          "bSortable": false,
          "sClass": "sessionDetails",
          "fnRender" : function(oObj) {
            var pr; 
            switch (oObj.aData.pr) {
            case 1:
              pr = "icmp";
              break;
            case 6:
              pr = "tcp";
              break;
            case 17:
              pr =  "udp";
              break;
            }
            return '<img src="DataTables-1.9.1/examples/examples_support/details_open.png"><div class="protocolText">' + pr + '</div>';
          }
        },
        {
          "mDataProp" : "id",
          "bVisible": false
        },
        { "mDataProp" : "fp",
          "sWidth": "50",
          "fnRender" : function(oObj) {
            return dateString(oObj.aData.fp, "<br>");
          }
        },
        { "mDataProp" : "lp",
          "sWidth": "50",
          "fnRender" : function(oObj) {
            return dateString(oObj.aData.lp, "<br>");
          }
        },
        { "mDataProp" : "a1",
          "sWidth": "100",
          "fnRender" : function(oObj) {
            if (oObj.aData.g1) {
              return ipString(oObj.aData.a1) + "<br>" + oObj.aData.g1;
            } else {
              return ipString(oObj.aData.a1);
            }
          }
        },
        { "mDataProp" : "p1",
          "sWidth": "55px"
        },
        { "mDataProp" : "a2",
          "sWidth": "100",
          "fnRender" : function(oObj) {
            if (oObj.aData.g2) {
              return ipString(oObj.aData.a2) + "<br>" + oObj.aData.g2;
            } else {
              return ipString(oObj.aData.a2);
            }
          }
        },
        { "mDataProp" : "p2",
          "sWidth": "55px"
        },
        { "mDataProp" : "pa",
          "sWidth": "55px"
          },
        { "mDataProp" : "by",
          "sWidth": "80px",
          "fnRender" : function(oObj) {
            return "" + numberWithCommas(oObj.aData.db) + " /<br>" + numberWithCommas(oObj.aData.by);
          }
        },
        { "mDataProp" : "no",
          "sWidth": "100px"
        },
        { "bSortable": false,
          "mDataProp" : "us",
          "fnRender" : function(oObj) {
            return (oObj.aData.us.join("<br>"));
          }
        }
      ],
      "aaSorting": [[2, "asc"]],
      "fnServerData": function ( sSource, aoData, fnCallback ) {
        var params = buildParams();
        aoData = $.merge(aoData, params);
        aoData.push({name: "facets", value: "1"});

        if (this.fnSettings()._iDisplayLength !== 100) {
          params.push({name: "iDisplayLength", value: this.fnSettings()._iDisplayLength});
        }

        var state = $.param(params);
        if (doPushState && state !== window.location.search.substring(1) && 'pushState' in history) {
          history.pushState({}, this.title || '', '?' + state);
        } else {
          doPushState = 1;
        }

        startBlink();

        $.ajax( {
           "dataType": 'json',
            "type": "GET",
            "url": sSource,
            "data": aoData,
            "success": function (json) {
              if (json.lpHisto && json.lpHisto[0]) {
                startTime = json.lpHisto[0][0]/1000;
                stopTime = (json.lpHisto[json.lpHisto.length-1][0]/1000) + 59;
              }
              // What a hack
              //$("#sessionGraph").width($("#sessionsInfo").outerWidth(true) - $("#world-map").outerWidth()-25);

              lastResult = json;
              drawGraph(json[$('#sessionGraphSelect').val()]);

              // Hack to clear colors
              var map = $('#world-map').data('mapObject');
              if (map.countries) {
                for(var key in map.countries) {
                  map.countries[key].setFill('#ffffff');
                }
              }

              if (json.bsqErr) {
                $("#bsqErr").show();
                $("#bsqErr").html("<pre>" + json.bsqErr.replace(/\n/g, "\n").replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;') + "</pre>");
              } else {
                $("#bsqErr").hide();
              }

              $('#world-map').vectorMap('set', 'values', lastResult.map);
              fnCallback(json);
              stopBlink();
            }
        } );
      }
    } );

    setupSessionGraphBinds(sessionsTable);
    $("#expression").width($("#nav").outerWidth(true) - $("#logo").width() - $("#search").outerWidth(true) - $("#export").outerWidth(true) - $("#date").outerWidth(true)-25);

    $('#world-map').vectorMap({
      map: 'world_en',
      //backgroundColor: '#686868',
      //scaleColors: ['#C8EEFF', '#0042A4'],
      backgroundColor: '#bdd7e7',
      scaleColors: ['#bae4b3', '#006d2c'],
      hoverColor: 'black',
      normalizeFunction: 'polynomial',
      hoverOpacity: 0.7,
      onLabelShow: function(e, el, code){
        el.html(el.html() + ' - ' + numberWithCommas(lastResult.map[code] || 0));
      },
      onRegionClick: function(e, code){
        addExpression("country == " + code);
      }
    });

    $('#world-map').hover (
      function() {
        $(this).css({
          position: "fixed",
          right: 0,
          top: $(this).offset().top,
          width: $(window).width()*0.75,
          height: $(window).height()*0.75
        });
        $(this).resize();
      },
      function(e) {
        if (e.relatedTarget && e.relatedTarget.className === "jvectormap-label") {
          return;
        }

        $(this).css({
          position: "relative",
          right: 0,
          top: 0,
          width: "250px",
          height: "150px"
        });
        $(this).resize();
      }
    );

    $.contextMenu({
        selector: '.context-menu-one',
        build: function($trigger, e) {
          var items = {};

          if (e.target.id === "a1" || e.target.id === "a2" || e.target.id === 'us') {
            if (e.target.id === 'us') {
              items = {
                items: {name: "Export Unique URLs", counts:0},
                itemcounts: {name: "Export Unique URLs with Counts", counts:1}
              };
            } else {
              items = {
                items: {name: "Export Unique IPs", counts:0},
                itemcounts: {name: "Export Unique IPs with Counts", counts:1}
              };
            }
            return {
              callback: function(key, options) {
                var data = sessionsTable.fnSettings().oApi._fnAjaxParameters(sessionsTable.fnSettings());
                var params = buildParams();
                params = $.merge(data, params);

                params.push({name:'field', value:e.target.id});
                params.push({name:'counts', value:items[key].counts});
                var url = "unique.txt?" + $.param(params);

                window.location = url;
              },
              items: items
            };
          }

          var sData = sessionsTable.fnGetData( e.target );
          if (sData === null) {
            return null;
          }
          var sPos = sessionsTable.fnGetPosition( e.target );
          var br;
          if (sPos[1] === 3 || sPos[1] === 5) {
            br = sData.indexOf("<br>");
            if (br === -1) {
              br = sData.length;
            }
            var ip = sData.substr(0, br);
            var country = sData.substr(br+4);
            var port = sessionsTable.fnGetData(sPos[0], sPos[1]+2);
            items = {
              andip: {name: "and " + ip, exp: "ip==" + ip},
              andnotip: {name: "and NOT " + ip, exp: "ip!=" + ip},
              andcountry: {name: "and Country " + country, exp: "country==" + country},
              andnotcountry: {name: "and NOT Country " + country, exp: "country!=" + country},
              andipport: {name: "and " + ip + ":" + port, exp: "ip=" + ip + ":" + port},
              andnotipport: {name: "and NOT " + ip + ":" + port, exp: "ip!==" + ip + ":" + port}
            };
          } else if (sPos[1] === 4 || sPos[1] === 6)  {
            items = {
              andport: {name: "and Port " + sData, exp: "port=" + sData},
              andnotport: {name: "and NOT Port " + sData, exp: "port!=" + sData}
            };
          } else if (sPos[1] === 9)  {
            items = {
              andport: {name: "and Node " + sData, exp: "node==" + sData},
              andnotport: {name: "and NOT Node " + sData, exp: "node!=" + sData}
            };
          } else {
            return null;
          }

          return {
            callback: function(key, options) {
              addExpression(items[key].exp);
            },
            items: items
          };
        }
    });

    /*$('.context-menu-one').on('click', function(e){
    })*/

    $("#expression").autocomplete("", {
      useDelimiter: true,
      delimiterChar: ' ',
      minChars: 0,
      maxItemsToShow: 100
    });

    $("#expression").data('autocompleter').fetchRemoteData = function(filter,callback) {
      var cp = $("#expression").getCursorPosition();
      var input = $("#expression").val();

      var spaceCP = (cp > 0 && cp === input.length && input[cp-1] === " ");

      for (var end = cp; end < input.length; end++) {
        if (input[end] === " ") {
          break;
        }
      }

      input = input.substr(0, end);
      var tokens = splitExpression(input);
      if (spaceCP) {
        tokens.push(" ");
      }

      if (tokens.length <= 1) {
        return callback(["(", "ip", "ip.src", "ip.dst", "ip.xff", "country", "country.src", "country.dst", "country.xff", "asn", "asn.src", "asn.dst", "asn.xff", "bytes", "databytes", "protocol", "ua", "tags", "header", "node", "packets", "port", "port.src", "port.dst", "uri", "host", "tls.issuer.cn", "tls.issuer.on", "tls.subject.cn", "tls.subject.on", "tls.serial", "tls.alt"]);
      }

      if (/^(ip)/.test(tokens[tokens.length-2])) {
        return callback(["!=", "=="]);
      }

      if (/^(bytes|databytes|protocol)/.test(tokens[tokens.length-2])) {
        return callback(["!=", "==" , ">=", "<=", "<", ">"]);
      }

      if (/^(tags|ua|header|country|asn|host|node|uri|tls)/.test(tokens[tokens.length-2])) {
        return callback(["!=", "=="]);
      }

      var item = tokens[tokens.length-3];
      if (/^(ip|bytes|databytes|protocol|packets|node|ua|uri|tls)/.test(item)) {
        return callback([]);
      }

      if (/^(country)/.test(item)) {
        return callback(Object.keys($('#world-map').data('mapObject').countries));
      }

      if (/^[!<=>]/.test(item)) {
        return callback(["&&", "||", ")"]);
      }

      if (/^(tags|header)/.test(item)) {
        if (filter.length < 1) {
          return callback([]);
        }
        $.ajax( {
            "dataType": 'html',
            "type": "GET",
            "url": '#{basePath}uniqueValue.json?type=' + item + '&filter=' + filter,
            "success": function(data) {
              return callback(JSON.parse(data));
            }
        } );
        return;
      }

      return callback(["(", "ip", "ip.src", "ip.dst", "ip.xff", "country", "country.src", "country.dst", "country.xff", "asn", "asn.src", "asn.dst", "asn.xff", "bytes", "databytes", "protocol", "ua", "tags", "header", "node", "packets", "port", "port.src", "port.dst", "uri", "host", "tls.issuer.cn", "tls.issuer.on", "tls.subject.cn", "tls.subject.on", "tls.serial", "tls.alt"]);
    };


    var searchStuffOffset = $('#searchStuff').offset();
    var headerOffset = $('.ui-widget-header').offset();

    $(window).scroll(function () {
      var scrollTop = $(window).scrollTop(); // check the visible top of the browser  

      if (searchStuffOffset.top < scrollTop) {
        $('#searchStuff').addClass('fixedsearch');
        $('#logo').hide();
      } else {
        $('#searchStuff').removeClass('fixedsearch');
        $('#logo').show();
      }

      if (headerOffset.top -  $('#searchStuff').height() < scrollTop) {
        $('.ui-widget-header').css("top", $('#searchStuff').height()-1);
        $('.ui-widget-header').addClass('fixedheader');
      } else {
        $('.ui-widget-header').removeClass('fixedheader');
      }

      var height = $('#searchStuff').height() + $('.ui-widget-header').height();
      $(".opened").each(function(a1, a2) {
        var top;
        var hasClass = $(a2).hasClass("fixedrow");

        if (hasClass) {
          top = $(a2).data('savedTopOffset');
        } else {
          top = $(a2).offset().top;
        }

        if ((top - height) < scrollTop) {
          if (!hasClass) {
            var widths = [];
            $(a2).children("td").each(function (i, td) {
              widths[i] = $(td).width();
            });
            $(a2).data('savedTopOffset', $(a2).offset().top);
            $(a2).css("top", height-1);
            $(a2).addClass('fixedrow');
            $(a2).children("td").each(function (i, td) {
              $(td).width(widths[i]);
            });
          }
          height += $(a2).height();
        } else {
          if (hasClass) {
            $(a2).removeClass('fixedrow');
          }
        }
      });
    });
  }); // document ready

  setTimeout(function () {window.history.ready = true;}, 500);

  $(window).resize(function(e) {
    if (e.target.id === "sessionGraph" || e.target.id === "world-map") {
      return;
    }
    // What a hack
    //$("#sessionGraph").width($("#sessionsInfo").outerWidth(true) - $("#world-map").outerWidth()-25);
    $("#expression").width($("#nav").outerWidth(true) - $("#logo").width() - $("#search").outerWidth(true) - $("#export").outerWidth(true) - $("#date").outerWidth(true)-25);
  });

